2+2
library(geobr)
library(dplyr)
library(ggplot2)
library(sf)
library(ggthemes)
# download sf of Brazilian states
states <- read_state(code_state = 'all')
# download metro areas sf and pille them up
download_metro <- function(y){
tmp <- read_metro_area(year = y) %>% select(name_metro, abbrev_state, geometry)
tmp$year <- y
return(tmp)
}
metros_sf <- lapply(X= c(1970, 2001, 2018), FUN=download_metro) %>% do.call('rbind', .)
ggplot() +
geom_sf(data=states, color="gray90", fill="gray80", size=.4) +
geom_sf(data=metros_sf, aes(color=as.factor(name_metro), fill=as.factor(name_metro)), show.legend = FALSE) +
facet_wrap(~year, nrow = 1) +
theme_map() +
theme( strip.background = element_rect(colour = "white", fill = "white"),
strip.text.x = element_text(size = 8, face ="bold"))
library(roxygen2)
library(devtools)
library(usethis)
3+3
2+2
2+2
list_geobr()
a <- list_geobr()
View(a)
library(sf)
library(readr)
library(geobr)
library(R.utils)
library(microbenchmark)
library(beepr)
library(sf)
library(readr)
library(geobr)
library(R.utils)
library(microbenchmark)
library(beepr)
mbm <- microbenchmark::microbenchmark(times = 30,
### RDS  -------------------------------------
'rds' = { # files
files_rds <- c('http://www.ipea.gov.br/geobr/tests/rds/ac.rds',
'http://www.ipea.gov.br/geobr/tests/rds/am.rds',
'http://www.ipea.gov.br/geobr/tests/rds/ap.rds')
# download files
lapply(X=files_rds, function(x) httr::GET(url=x, httr::progress(),
httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T)) )
# read files and pile them up
files <- unlist(lapply(strsplit(files_rds,"/"), tail, n = 1L))
files <- paste0(tempdir(),"/",files)
files <- lapply(X=files, FUN= readr::read_rds)
shape <- do.call('rbind', files)
},
### GPKG  -------------------------------------
'gpkg' = { # files
files_gpkg <- c('http://www.ipea.gov.br/geobr/tests/gpkg/ac.gpkg',
'http://www.ipea.gov.br/geobr/tests/gpkg/am.gpkg',
'http://www.ipea.gov.br/geobr/tests/gpkg/ap.gpkg')
# download files
lapply(X=files_gpkg, function(x) httr::GET(url=x, httr::progress(),
httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T)) )
# read files and pile them up
files <- unlist(lapply(strsplit(files_gpkg,"/"), tail, n = 1L))
files <- paste0(tempdir(),"/",files)
files <- lapply(X=files, FUN= sf::st_read)
shape <- do.call('rbind', files)
},
### GPKG_zip  -------------------------------------
'gpkg_zip' = { # files
files_gpkg_zip <- c('http://www.ipea.gov.br/geobr/tests/gpkg/ac.gpkg.gz',
'http://www.ipea.gov.br/geobr/tests/gpkg/am.gpkg.gz',
'http://www.ipea.gov.br/geobr/tests/gpkg/ap.gpkg.gz')
# download files
lapply(X=files_gpkg_zip, function(x) httr::GET(url=x, httr::progress(),
httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T)) )
# read files and pile them up
files <- unlist(lapply(strsplit(files_gpkg_zip,"/"), tail, n = 1L))
files <- paste0(tempdir(),"/",files)
gpkg_fun <- function( zipf){
# zipf <- files[1]
# zipf = zipado
# paste0(stringr::str_match(zipf[1], "gpkg/(.*?).gpkg")[2],".gpkg")
# temp file
tempf <- file.path(tempdir(), paste0(stringr::str_match(zipf, "/(.*?).gpkg.gz")[2],".gpkg") )
# unzip
R.utils::gunzip(zipf, remove=F, overwrite=T, tempf)
# read
a <- sf::st_read(dsn=tempf,  quiet = TRUE)
return(a)
files <- list.files(tempdir(), full.names = T, pattern = "^file")
file.remove(files)
}
files <- lapply(X=files, FUN= gpkg_fun)
shape <- do.call('rbind', files)
},
### geojson_zip -------------------------------------
'geojson_zip' = { # files
files_geojson_zip <- c('http://www.ipea.gov.br/geobr/tests/geojson/ac.geojson.gz',
'http://www.ipea.gov.br/geobr/tests/geojson/am.geojson.gz',
'http://www.ipea.gov.br/geobr/tests/geojson/ap.geojson.gz')
# download files
lapply(X=files_geojson_zip, function(x) httr::GET(url=x, httr::progress(),
httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T)) )
# read files and pile them up
files <- unlist(lapply(strsplit(files_geojson_zip,"/"), tail, n = 1L))
files <- paste0(tempdir(),"/",files)
geojson_fun <- function( zipf){
# zipf <- files[1]
# zipf = zipado
# paste0(stringr::str_match(zipf[1], "geojson/(.*?).geojson")[2],".geojson")
# temp file
tempf <- file.path(tempdir(), paste0(stringr::str_match(zipf, "/(.*?).geojson.gz")[2],".geojson") )
# unzip
R.utils::gunzip(zipf, remove=F, overwrite=T, tempf)
# read
a <- sf::st_read(dsn=tempf,  quiet = TRUE)
return(a)
files <- list.files(tempdir(), full.names = T, pattern = "^file")
file.remove(files)
}
files <- lapply(X=files, FUN= geojson_fun)
shape <- do.call('rbind', files)
},
### geojson  -------------------------------------
'geojson' = { # files
files_geojson <- c('http://www.ipea.gov.br/geobr/tests/geojson/ac.geojson',
'http://www.ipea.gov.br/geobr/tests/geojson/am.geojson',
'http://www.ipea.gov.br/geobr/tests/geojson/ap.geojson')
# download files
lapply(X=files_geojson, function(x) httr::GET(url=x, httr::progress(),
httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T)) )
# read files and pile them up
files <- unlist(lapply(strsplit(files_geojson,"/"), tail, n = 1L))
files <- paste0(tempdir(),"/",files)
files <- lapply(X=files, FUN= sf::st_read)
shape <- do.call('rbind', files)
}
)
beepr::beep()
# plot result
ggplot2::autoplot(mbm)
ggplot2::autoplot(mbm) %>% ggsave('benchmark_r_rafa.png', width = 10, height = 10, units = cm")
ggplot2::autoplot(mbm) %>% ggsave(filename='benchmark_r_rafa.png', width = 10, height = 10, units = "cm")
ggplot2::autoplot(mbm) %>% ggsave(filename='benchmark_r_rafa.png', width = 10, height = 10, units = "cm")
# plot result
ggplot2::autoplot(mbm) %>% ggsave(filename='benchmark_r_rafa.png', width = 15, height = 10, units = "cm")
# plot result
ggplot2::autoplot(mbm) %>% ggsave(filename='benchmark_r_rafa.png', width = 13, height = 10, units = "cm")
# plot result
ggplot2::autoplot(mbm) %>% ggsave(filename='benchmark_r_rafa.png', width = 12, height = 10, units = "cm")
mbm <- microbenchmark::microbenchmark(times = 30,
### RDS  -------------------------------------
'rds' = { # files
files_rds <- c('http://www.ipea.gov.br/geobr/tests/rds/ac.rds',
'http://www.ipea.gov.br/geobr/tests/rds/am.rds',
'http://www.ipea.gov.br/geobr/tests/rds/ap.rds')
# download files
lapply(X=files_rds, function(x) httr::GET(url=x, httr::progress(),
httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T)) )
# read files and pile them up
files <- unlist(lapply(strsplit(files_rds,"/"), tail, n = 1L))
files <- paste0(tempdir(),"/",files)
files <- lapply(X=files, FUN= readr::read_rds)
shape <- do.call('rbind', files)
},
### GPKG  -------------------------------------
'gpkg' = { # files
files_gpkg <- c('http://www.ipea.gov.br/geobr/tests/gpkg/ac.gpkg',
'http://www.ipea.gov.br/geobr/tests/gpkg/am.gpkg',
'http://www.ipea.gov.br/geobr/tests/gpkg/ap.gpkg')
# download files
lapply(X=files_gpkg, function(x) httr::GET(url=x, httr::progress(),
httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T)) )
# read files and pile them up
files <- unlist(lapply(strsplit(files_gpkg,"/"), tail, n = 1L))
files <- paste0(tempdir(),"/",files)
files <- lapply(X=files, FUN= sf::st_read)
shape <- do.call('rbind', files)
},
### GPKG_zip  -------------------------------------
'gpkg_zip' = { # files
files_gpkg_zip <- c('http://www.ipea.gov.br/geobr/tests/gpkg/ac.gpkg.gz',
'http://www.ipea.gov.br/geobr/tests/gpkg/am.gpkg.gz',
'http://www.ipea.gov.br/geobr/tests/gpkg/ap.gpkg.gz')
# download files
lapply(X=files_gpkg_zip, function(x) httr::GET(url=x, httr::progress(),
httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T)) )
# read files and pile them up
files <- unlist(lapply(strsplit(files_gpkg_zip,"/"), tail, n = 1L))
files <- paste0(tempdir(),"/",files)
gpkg_fun <- function( zipf){
# zipf <- files[1]
# zipf = zipado
# paste0(stringr::str_match(zipf[1], "gpkg/(.*?).gpkg")[2],".gpkg")
# temp file
tempf <- file.path(tempdir(), paste0(stringr::str_match(zipf, "/(.*?).gpkg.gz")[2],".gpkg") )
# unzip
R.utils::gunzip(zipf, remove=F, overwrite=T, tempf)
# read
a <- sf::st_read(dsn=tempf,  quiet = TRUE)
return(a)
files <- list.files(tempdir(), full.names = T, pattern = "^file")
file.remove(files)
}
files <- lapply(X=files, FUN= gpkg_fun)
shape <- do.call('rbind', files)
},
### geojson_zip -------------------------------------
'geojson_zip' = { # files
files_geojson_zip <- c('http://www.ipea.gov.br/geobr/tests/geojson/ac.geojson.gz',
'http://www.ipea.gov.br/geobr/tests/geojson/am.geojson.gz',
'http://www.ipea.gov.br/geobr/tests/geojson/ap.geojson.gz')
# download files
lapply(X=files_geojson_zip, function(x) httr::GET(url=x, httr::progress(),
httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T)) )
# read files and pile them up
files <- unlist(lapply(strsplit(files_geojson_zip,"/"), tail, n = 1L))
files <- paste0(tempdir(),"/",files)
geojson_fun <- function( zipf){
# zipf <- files[1]
# zipf = zipado
# paste0(stringr::str_match(zipf[1], "geojson/(.*?).geojson")[2],".geojson")
# temp file
tempf <- file.path(tempdir(), paste0(stringr::str_match(zipf, "/(.*?).geojson.gz")[2],".geojson") )
# unzip
R.utils::gunzip(zipf, remove=F, overwrite=T, tempf)
# read
a <- sf::st_read(dsn=tempf,  quiet = TRUE)
return(a)
files <- list.files(tempdir(), full.names = T, pattern = "^file")
file.remove(files)
}
files <- lapply(X=files, FUN= geojson_fun)
shape <- do.call('rbind', files)
},
### geojson  -------------------------------------
'geojson' = { # files
files_geojson <- c('http://www.ipea.gov.br/geobr/tests/geojson/ac.geojson',
'http://www.ipea.gov.br/geobr/tests/geojson/am.geojson',
'http://www.ipea.gov.br/geobr/tests/geojson/ap.geojson')
# download files
lapply(X=files_geojson, function(x) httr::GET(url=x, httr::progress(),
httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T)) )
# read files and pile them up
files <- unlist(lapply(strsplit(files_geojson,"/"), tail, n = 1L))
files <- paste0(tempdir(),"/",files)
files <- lapply(X=files, FUN= sf::st_read)
shape <- do.call('rbind', files)
}
)
beepr::beep()
# plot result
ggplot2::autoplot(mbm)
####### BENCHMARK Download and Reading files ---------------------
devtools::install_github("hrbrmstr/speedtest")
speedtest::spd_test()
install.packages('pingr')
install.packages('speedtest')
library(speedtest)
####### BENCHMARK Download and Reading files ---------------------
install.packages("speedtest", repos = "https://cinc.rud.is")
speedtest::spd_test()
library(speedtest)
# list all data files available in the geobr package
geo=list.files("//storage1/geobr/data", pattern = '.gpkg')
geo=list.files("//storage1/geobr/data_gpkg", pattern = '.gpkg')
list.files("//storage1/geobr/data_gpkg", pattern = '.gpkg')
list.files("//storage1/geobr/data_gpkg")
list.files("//storage1/geobr/data")
list.files("//storage1/geobr/data", pattern = '.rds')
# create empty metadata
metadata <- data.frame(matrix(ncol = 5, nrow = 0))
colnames(metadata) <- c("geo","year","code","download_path","code_abrev")
# list all data files available in the geobr package
geo=list.files("//storage1/geobr/data_gpkg")
# populate the metadata table
for (a in geo) {    # a="setor_censitario"
ano=list.files(paste("//storage1/geobr/data_gpkg",a,sep="/"))
for (b in ano) { # b=2000
estado=list.files(paste("//storage1/geobr/data_gpkg",a,b,sep="/"))
for (c in estado) { #c="Urbano"
if (c=="Urbano"|c=="Rural"){
estado2=list.files(paste("//storage1/geobr/data_gpkg",a,b,c,sep="/"))
for (d in estado2) { #d=estado2[1]
if (c=="Urbano") {
metadata[nrow(metadata) + 1,] = list(a,b,paste0("U",substr(d, 1, 2)),paste("http://www.ipea.gov.br/geobr/data_gpkg",a,b,c,d,sep="/"))
}
if (c=="Rural") {
metadata[nrow(metadata) + 1,] = list(a,b,paste0("R",substr(d, 1, 2)),paste("http://www.ipea.gov.br/geobr/data_gpkg",a,b,c,d,sep="/"))
}
}
} else {
metadata[nrow(metadata) + 1,] = list(a,b,substr(c, 1, 2),paste("http://www.ipea.gov.br/geobr/data_gpkg",a,b,c,sep="/"))}
}
}
}
metadata
View(metadata)
# create empty metadata
metadata <- data.frame(matrix(ncol = 5, nrow = 0))
colnames(metadata) <- c("geo","year","code","download_path","code_abrev")
# list all data files available in the geobr package
geo=list.files("//storage1/geobr/data")
# populate the metadata table
for (a in geo) {    # a="setor_censitario"
ano=list.files(paste("//storage1/geobr/data",a,sep="/"))
for (b in ano) { # b=2000
estado=list.files(paste("//storage1/geobr/data",a,b,sep="/"))
for (c in estado) { #c="Urbano"
if (c=="Urbano"|c=="Rural"){
estado2=list.files(paste("//storage1/geobr/data",a,b,c,sep="/"))
for (d in estado2) { #d=estado2[1]
if (c=="Urbano") {
metadata[nrow(metadata) + 1,] = list(a,b,paste0("U",substr(d, 1, 2)),paste("http://www.ipea.gov.br/geobr/data",a,b,c,d,sep="/"))
}
if (c=="Rural") {
metadata[nrow(metadata) + 1,] = list(a,b,paste0("R",substr(d, 1, 2)),paste("http://www.ipea.gov.br/geobr/data",a,b,c,d,sep="/"))
}
}
} else {
metadata[nrow(metadata) + 1,] = list(a,b,substr(c, 1, 2),paste("http://www.ipea.gov.br/geobr/data",a,b,c,sep="/"))}
}
}
}
metadata2 <- copy(metadata)
metadata2 <- metadata
# create empty metadata
metadata <- data.frame(matrix(ncol = 5, nrow = 0))
colnames(metadata) <- c("geo","year","code","download_path","code_abrev")
# list all data files available in the geobr package
geo=list.files("//storage1/geobr/data_gpkg")
# populate the metadata table
for (a in geo) {    # a="setor_censitario"
ano=list.files(paste("//storage1/geobr/data_gpkg",a,sep="/"))
for (b in ano) { # b=2000
estado=list.files(paste("//storage1/geobr/data_gpkg",a,b,sep="/"))
for (c in estado) { #c="Urbano"
if (c=="Urbano"|c=="Rural"){
estado2=list.files(paste("//storage1/geobr/data_gpkg",a,b,c,sep="/"))
for (d in estado2) { #d=estado2[1]
if (c=="Urbano") {
metadata[nrow(metadata) + 1,] = list(a,b,paste0("U",substr(d, 1, 2)),paste("http://www.ipea.gov.br/geobr/data_gpkg",a,b,c,d,sep="/"))
}
if (c=="Rural") {
metadata[nrow(metadata) + 1,] = list(a,b,paste0("R",substr(d, 1, 2)),paste("http://www.ipea.gov.br/geobr/data_gpkg",a,b,c,d,sep="/"))
}
}
} else {
metadata[nrow(metadata) + 1,] = list(a,b,substr(c, 1, 2),paste("http://www.ipea.gov.br/geobr/data_gpkg",a,b,c,sep="/"))}
}
}
}
1274*2
# get code abbreviations
library(data.table)
setDT(metadata)
metadata[ grepl("11", substr(code, 1, 3)), code_abrev :=	"RO" ]
metadata[ grepl("12", substr(code, 1, 3)), code_abrev :=	"AC" ]
metadata[ grepl("13", substr(code, 1, 3)), code_abrev :=	"AM" ]
metadata[ grepl("14", substr(code, 1, 3)), code_abrev :=	"RR" ]
metadata[ grepl("15", substr(code, 1, 3)), code_abrev :=	"PA" ]
metadata[ grepl("16", substr(code, 1, 3)), code_abrev :=	"AP" ]
metadata[ grepl("17", substr(code, 1, 3)), code_abrev :=	"TO" ]
metadata[ grepl("21", substr(code, 1, 3)), code_abrev :=	"MA" ]
metadata[ grepl("22", substr(code, 1, 3)), code_abrev :=	"PI" ]
metadata[ grepl("23", substr(code, 1, 3)), code_abrev :=	"CE" ]
metadata[ grepl("24", substr(code, 1, 3)), code_abrev :=	"RN" ]
metadata[ grepl("25", substr(code, 1, 3)), code_abrev :=	"PB" ]
metadata[ grepl("26", substr(code, 1, 3)), code_abrev :=	"PE" ]
metadata[ grepl("27", substr(code, 1, 3)), code_abrev :=	"AL" ]
metadata[ grepl("28", substr(code, 1, 3)), code_abrev :=	"SE" ]
metadata[ grepl("29", substr(code, 1, 3)), code_abrev :=	"BA" ]
metadata[ grepl("31", substr(code, 1, 3)), code_abrev :=	"MG" ]
metadata[ grepl("32", substr(code, 1, 3)), code_abrev :=	"ES" ]
metadata[ grepl("33", substr(code, 1, 3)), code_abrev :=	"RJ" ]
metadata[ grepl("35", substr(code, 1, 3)), code_abrev :=	"SP" ]
metadata[ grepl("41", substr(code, 1, 3)), code_abrev :=	"PR" ]
metadata[ grepl("42", substr(code, 1, 3)), code_abrev :=	"SC" ]
metadata[ grepl("43", substr(code, 1, 3)), code_abrev :=	"RS" ]
metadata[ grepl("50", substr(code, 1, 3)), code_abrev :=	"MS" ]
metadata[ grepl("51", substr(code, 1, 3)), code_abrev :=	"MT" ]
metadata[ grepl("52", substr(code, 1, 3)), code_abrev :=	"GO" ]
metadata[ grepl("53", substr(code, 1, 3)), code_abrev :=	"DF" ]
# to avoid conflict with data.table
metadata <- as.data.frame(metadata)
table(metadata$geo)
table(metadata$year)
subset(metadata, geo == 'metropolitan_area')
data.table::fwrite(metadata,"//storage1/geobr/metadata/metadata.csv")
library(geobr)

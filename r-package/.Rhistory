<<<<<<< HEAD
Sys.setenv(NOT_CRAN = "true")
system.time(  geobr_cov <- covr::package_coverage() )
geobr_cov
beepr::beep()
# ERRORS
test_that("read_weighting_area", {
# Wrong year and code
expect_error(read_weighting_area(code_weighting=9999999, year=9999999))
# Wrong code
expect_error(read_weighting_area(code_weighting=9999999))
expect_error(read_weighting_area(code_weighting=5201108312313213))
# Wrong year
expect_error(read_weighting_area( year=9999999))
})
expect_error(read_weighting_area(code_weighting=5201108312313211231233))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
Sys.setenv(NOT_CRAN = "true")
system.time(  geobr_cov <- covr::package_coverage() )
geobr_cov
beepr::beep()
# ERRORS
test_that("read_weighting_area", {
# Wrong year and code
expect_error(read_weighting_area(code_weighting=9999999, year=9999999))
# Wrong code
expect_error(read_weighting_area(code_weighting=9999999))
expect_error(read_weighting_area(code_weighting=5201108312313213123123123))
# Wrong year
expect_error(read_weighting_area( year=9999999))
})
# # read data
testthat::expect_output( read_weighting_area(code_weighting=5201108, year=2010) )
testthat::expect_output( read_weighting_area(code_weighting="AC", year=2010) )
testthat::expect_output( read_weighting_area(code_weighting=11, year=2010) )
test_code <- read_weighting_area(code_weighting=5201108005004, year=2010)
# check sf object
expect_true(is(test_code, "sf"))
# check number of weighting areas
expect_equal(nrow(test_code), 68)
# check projection
expect_equal(sf::st_crs(test_code)[[2]], "+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs")
e
context("read_weighting_area")
# skip tests because they take too much time
testthat::skip_on_cran()
test_that("read_weighting_area", {
# # read data
testthat::expect_output( read_weighting_area(code_weighting=5201108, year=2010) )
testthat::expect_output( read_weighting_area(code_weighting="AC", year=2010) )
testthat::expect_output( read_weighting_area(code_weighting=11, year=2010) )
test_code <- read_weighting_area(code_weighting=5201108005004, year=2010)
# check sf object
expect_true(is(test_code, "sf"))
# check number of weighting areas
expect_equal(nrow(test_code), 68)
# check projection
expect_equal(sf::st_crs(test_code)[[2]], "+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs")
})
# ERRORS
test_that("read_weighting_area", {
# Wrong year and code
expect_error(read_weighting_area(code_weighting=9999999, year=9999999))
# Wrong code
expect_error(read_weighting_area(code_weighting=9999999))
expect_error(read_weighting_area(code_weighting=5201108312313213123123123))
# Wrong year
expect_error(read_weighting_area( year=9999999))
})
library(geobr)
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
# update Package coverage
Sys.setenv(NOT_CRAN = "false")
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
# update Package coverage
Sys.setenv(NOT_CRAN = "true")
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
test_code <- read_weighting_area(code_weighting=5201108005004, year=2010)
# check sf object
expect_true(is(test_code, "sf"))
system.time(  geobr_cov <- covr::package_coverage() )
geobr_cov
beepr::beep()
function_coverage(fun='list_geobr', test_file("tests/testthat/test-list_geobr.R"))
list_geobr(2323)
function_coverage(fun='list_geobr', test_file("tests/testthat/test-list_geobr.R"))
function_coverage(fun='list_geobr', test_file("tests/testthat/test-list_geobr.R"))
function_coverage(fun='list_geobr', test_file("tests/testthat/test-list_geobr.R"))
function_coverage(fun='list_geobr', test_file("tests/testthat/test-list_geobr.R"))
gc()
function_coverage(fun='list_geobr', test_file("tests/testthat/test-list_geobr.R"))
expect_output(list_geobr())
list_geobr()
expect_output(list_geobr())
a <- list_geobr()
class(a)
expect_true(is.data.frame(df))
# read data
df <- list_geobr()
# check number of cols
expect_equal(ncol(df), 4)
expect_true(is.data.frame(df))
function_coverage(fun='list_geobr', test_file("tests/testthat/test-list_geobr.R"))
httr::GET(url="https://raw.githubusercontent.com/ipeaGIT/geobr/master/README.md", httr::write_disk(tempf, overwrite = T))
# Get readme.md file
tempf <- file.path(tempdir(), "readme.md")
httr::GET(url="https://raw.githubusercontent.com/ipeaGIT/geobr/master/README.md", httr::write_disk(tempf, overwrite = T))
httr::GET(url="https://raw.githubusercontent.com/ipeaGIT/geobr/master/READM", httr::write_disk(tempf, overwrite = T))
a <-   httr::GET(url="https://raw.githubusercontent.com/ipeaGIT/geobr/master/README.md", httr::write_disk(tempf, overwrite = T))
a
function_coverage(fun='list_geobr', test_file("tests/testthat/test-list_geobr.R"))
lookup_muni(code_muni=2304400)
testthat::expect_output( lookup_muni(code_muni=2304400) )
testthat::expect_output_file( lookup_muni(code_muni=2304400) )
function_coverage(fun='lookup_muni', test_file("tests/testthat/test-lookup_muni.R"))
function_coverage(fun='lookup_muni', test_file("tests/testthat/test-lookup_muni.R"))
lookup_muni()
function_coverage(fun='lookup_muni', test_file("tests/testthat/test-lookup_muni.R"))
function_coverage(fun='lookup_muni', test_file("tests/testthat/test-lookup_muni.R"))
lookup_muni(name_muni="teste")
lookup_muni(code_muni="teste")
function_coverage(fun='lookup_muni', test_file("tests/testthat/test-lookup_muni.R"))
function_coverage(fun='lookup_muni', test_file("tests/testthat/test-lookup_muni.R"))
function_coverage(fun='lookup_muni', test_file("tests/testthat/test-lookup_muni.R"))
function_coverage(fun='lookup_muni', test_file("tests/testthat/test-lookup_muni.R"))
function_coverage(fun='lookup_muni', test_file("tests/testthat/test-lookup_muni.R"))
function_coverage(fun='lookup_muni', test_file("tests/testthat/test-lookup_muni.R"))
function_coverage(fun='lookup_muni', test_file("tests/testthat/test-lookup_muni.R"))
=======
head(cc)
subset(a, name_muni == 'Anicuns' )
subset(a, name_muni == 'AdelÃ¢ndia' )
# download dos dados
m <- read_municipal_seat()
# Quantas vezes cada municipios se repete
freq <- table(m$code_muni)
freq
library(magrittr)
# Quantas vezes cada municipios se repete
freq <- table(m$code_muni) %>% as.data.frame( )
freq
head(freq)
# identifica repetidos
repetidos <- subset(freq, Freq >1 )
repetidos
# download dos dados
m <- read_municipal_seat(year=99999)
# download dos dados
m <- read_municipal_seat(year=1991)
# Quantas vezes cada municipios se repete
freq <- table(m$code_muni) %>% as.data.frame( )
# identifica repetidos
repetidos <- subset(freq, Freq >1 )
repetidos
# download dos dados
m <- read_municipal_seat(year=1872)
# Quantas vezes cada municipios se repete
freq <- table(m$code_muni) %>% as.data.frame( )
# identifica repetidos
repetidos <- subset(freq, Freq >1 )
repetidos
# download dos dados
m <- read_municipal_seat(year=1980)
# Quantas vezes cada municipios se repete
freq <- table(m$code_muni) %>% as.data.frame( )
# identifica repetidos
repetidos <- subset(freq, Freq >1 )
repetidos
Sys.getenv("TEST_ONE") == ""
devtools::check(pkg = ".",  cran = TRUE)
library(geobr)
a <- read_amazon()
plot(a)
a <- read_amazon(tp='original')
a <- read_amazon()
b <- read_amazon(tp='original')
head(a)
View(a)
View(b)
plot(a)
plot(b)
mapview::mapview(a) +b
meso <- read_meso_region(code_meso="all", year=2010)
plot(meso)
head(meso)
>>>>>>> d3ef7cb8894b9af34e4d6c62ecfe6eec9529e2cc
# Get metadata with data addresses
temp_meta <- download_metadata(geography="lookup_muni")
# list paths of files to download
file_url <- as.character(temp_meta$download_path)
system.time(  lookup_table_2010 <- utils::read.csv(file_url, stringsAsFactors = F, encoding = 'UTF-8'))
system.time(  lookup_table_2010 <- readr::read_csv(file_url, stringsAsFactors = F, encoding = 'UTF-8'))
system.time(  lookup_table_2010 <- readr::read_csv(file_url))
lookup_table_2010 <- readr::read_csv(file_url, stringsAsFactors = F, encoding = 'UTF-8')
# Get metadata with data addresses
temp_meta <- download_metadata(geography="lookup_muni")
# list paths of files to download
file_url <- as.character(temp_meta$download_path)
lookup_table_2010 <- readr::read_csv(file_url,  locale(encoding = 'UTF-8'))
lookup_table_2010 <- readr::read_csv(file_url,  encoding = "UTF-8")
lookup_table_2010
lookup_table_2010 <- readr::read_csv(file_url)
lookup_table_2010
sapply(lookup_table_2010, class)
library(geobr)
# Get metadata with data addresses
temp_meta <- download_metadata(geography="lookup_muni")
# list paths of files to download
file_url <- as.character(temp_meta$download_path)
# read file
lookup_table_2010 <- readr::read_csv(file_url)
mun_all <- lookup_muni(name_muni = "all")
library(geobr)
mun_all <- lookup_muni(name_muni = "all")
#' # Or you can get a lookup table for the same municipality searching for its code
#' mun <- lookup_muni(code_muni = 3304557)
#'
#' # Get lookup table for all municipalities
#' mun_all <- lookup_muni(name_muni = "all")
#'
#' # Or:
#' mun_all <- lookup_muni(code_muni = "all")
#'}
#'
lookup_muni <- function(name_muni = NULL, code_muni = NULL) {
# Get metadata with data addresses
temp_meta <- download_metadata(geography="lookup_muni")
# list paths of files to download
file_url <- as.character(temp_meta$download_path)
# read file
suppressWarnings({  lookup_table_2010 <- readr::read_csv(file_url) })
# lookup_table_2010 <- utils::read.csv(file_url, stringsAsFactors = F, encoding = 'UTF-8')
# code_muni has priority over other arguments
# if code_muni is empty and name_muni is not empty, search for name_muni
if (is.null(code_muni) & !is.null(name_muni)) {
if (name_muni == "all") {
# Delete formatted column
lookup_table_2010$name_muni_format <- NULL
return(lookup_table_2010)
} else {
# 1. Format input -----------------
x <- name_muni
# to lower
x <- tolower(x)
# delete accents
x <- iconv(x, to="ASCII//TRANSLIT")
x <- iconv(x, to="UTF-8")
# trim white spaces
x <- trimws(x, "both")
# 2. Search formated input in the lookup table -----------------
# message(sprintf("Searching for %s", x))
# Filter muni name
lookup_filter <- subset(lookup_table_2010, name_muni_format == x)
if (nrow(lookup_filter) == 0) {
stop("Please insert a valid municipality name", call. = FALSE)
} else {
message(sprintf("Returning results for municipality %s", lookup_filter$name_muni))
# n_unique <- length(unique(lookup_filter$name_muni_format))
# Delete formatted column
lookup_filter$name_muni_format <- NULL
return(lookup_filter)
}
}
}
# if both name and code are provided, give a warning saying that the name was ignored
if (is.numeric(code_muni) & !is.null(name_muni)) {
warning("Ignoring argument name_muni")
}
# code_muni has priority over other arguments
if (is.numeric(code_muni) | is.character(code_muni)) {
if (code_muni == "all") {
# Delete formatted column
lookup_table_2010$name_muni_format <- NULL
return(lookup_table_2010)
} else {
# 1. Search input in the lookup table -----------------
x <- code_muni
# Filter muni name
lookup_filter <- subset(lookup_table_2010, code_muni == x)
if (nrow(lookup_filter) == 0) {
stop("Please insert a valid municipality code", call. = FALSE)
} else {
message(sprintf("Returning results for municipality %s", lookup_filter$name_muni))
# Delete formatted column
lookup_filter$name_muni_format <- NULL
return(lookup_filter)
}
}
}
# if both arguments are empty
if (is.null(code_muni) & is.null(code_muni)) {
stop("Please insert either a municipality name or a municipality code")
}
}
mun_all <- lookup_muni(code_muni = "all")
mun <- lookup_muni(code_muni = 3304557)
expect_warning(lookup_muni(name_muni="fortaleza", code_muni=2304400))
lookup_muni(name_muni = "fortaleza")
lookup_muni(name_muni="arroz", code_muni=2304400)
a <- lookup_muni(name_muni="arroz", code_muni=2304400)
rm(a)
a <- lookup_muni(name_muni="arroz", code_muni=2304400)
a
expect_warning( lookup_muni(name_muni="arroz", code_muni=2304400) )
read_csv("https://github.com/tidyverse/readr/raw/master/inst/extdata/mtcars.csv")
library(readr)
read_csv("https://github.com/tidyverse/readr/raw/master/inst/extdata/mtcars.csv")
# Get metadata with data addresses
temp_meta <- download_metadata(geography="lookup_muni")
# list paths of files to download
file_url <- as.character(temp_meta$download_path)
lookup_table_2010 <- readr::read_csv(file_url)
# read file
col_types <- cols(
code_muni = col_double(),
name_muni = col_character(),
code_state = col_double(),
name_state = col_character(),
abrev_state = col_character(),
code_micro = col_double(),
name_micro = col_character(),
code_meso = col_double(),
name_meso = col_character(),
code_immediate = col_double(),
name_immediate = col_character(),
code_intermediate = col_double(),
name_intermediate = col_character(),
name_muni_format = col_character())
# read file
col_tps <- cols(
code_muni = col_double(),
name_muni = col_character(),
code_state = col_double(),
name_state = col_character(),
abrev_state = col_character(),
code_micro = col_double(),
name_micro = col_character(),
code_meso = col_double(),
name_meso = col_character(),
code_immediate = col_double(),
name_immediate = col_character(),
code_intermediate = col_double(),
name_intermediate = col_character(),
name_muni_format = col_character())
lookup_table_2010 <- readr::read_csv(file_url, col_types = col_tps)
# read file
col_tps <- cols(
code_muni = col_numeric(),
name_muni = col_character(),
code_state = col_numeric(),
name_state = col_character(),
abrev_state = col_character(),
code_micro = col_numeric(),
name_micro = col_character(),
code_meso = col_numeric(),
name_meso = col_character(),
code_immediate = col_numeric(),
name_immediate = col_character(),
code_intermediate = col_numeric(),
name_intermediate = col_character(),
name_muni_format = col_character())
# read file
col_tps <- cols(
code_muni = col_double(),
name_muni = col_character(),
code_state = col_double(),
name_state = col_character(),
abrev_state = col_character(),
code_micro = col_double(),
name_micro = col_character(),
code_meso = col_double(),
name_meso = col_character(),
code_immediate = col_double(),
name_immediate = col_character(),
code_intermediate = col_double(),
name_intermediate = col_character(),
name_muni_format = col_character())
lookup_table_2010 <- readr::read_csv(file_url, col_types = col_tps)
lookup_table_2010 <- readr::read_csv(file_url, col_types = cols())
library(geobr)
# Get metadata with data addresses
temp_meta <- download_metadata(geography="lookup_muni")
# list paths of files to download
file_url <- as.character(temp_meta$download_path)
# read file
col_tps <- cols(
code_muni = col_double(),
name_muni = col_character(),
code_state = col_double(),
name_state = col_character(),
abrev_state = col_character(),
code_micro = col_double(),
name_micro = col_character(),
code_meso = col_double(),
name_meso = col_character(),
code_immediate = col_double(),
name_immediate = col_character(),
code_intermediate = col_double(),
name_intermediate = col_character(),
name_muni_format = col_character())
system.time(  lookup_table_2010 <- readr::read_csv(file_url, col_types = cols())
)
# read file
col_tps <- cols(
code_muni = col_double(),
name_muni = col_character(),
code_state = col_double(),
name_state = col_character(),
abrev_state = col_character(),
code_micro = col_double(),
name_micro = col_character(),
code_meso = col_double(),
name_meso = col_character(),
code_immediate = col_double(),
name_immediate = col_character(),
code_intermediate = col_double(),
name_intermediate = col_character(),
name_muni_format = col_character())
system.time(    lookup_table_2010 <- readr::read_csv(file_url, col_types = col_tps )
)
system.time(  lookup_table_2010 <- readr::read_csv(file_url, col_types = cols())
)
system.time(    lookup_table_2010 <- readr::read_csv(file_url, col_types = col_tps )
)
system.time(  lookup_table_2010 <- readr::read_csv(file_url, col_types = cols())
)
system.time(    lookup_table_2010 <- readr::read_csv(file_url, col_types = col_tps )
)
system.time(    lookup_table_2010 <- readr::read_csv(file_url, col_types = col_tps )
)
system.time(  lookup_table_2010 <- readr::read_csv(file_url, col_types = cols())
)
system.time(  lookup_table_2010 <- readr::read_csv(file_url, col_types = cols())
)
system.time(    lookup_table_2010 <- readr::read_csv(file_url, col_types = col_tps )
)
lookup_table_2010 <- readr::read_csv(file_url, message = FALSE )
lookup_table_2010 <- readr::read_csv(file_url, col_types = cols() )
2+@
2+2
library(geobr)
3+3
library(testthat)
library(covr)
function_coverage(fun='lookup_muni', test_file("tests/testthat/test-lookup_muni.R"))
# update Package coverage
Sys.setenv(NOT_CRAN = "true")
function_coverage(fun='lookup_muni', test_file("tests/testthat/test-lookup_muni.R"))
function_coverage(fun='lookup_muni', test_file("tests/testthat/test-lookup_muni.R"))
testthat::expect_output(lookup_muni(name_muni = "fortaleza"))
function_coverage(fun='lookup_muni', test_file("tests/testthat/test-lookup_muni.R"))
function_coverage(fun='lookup_muni', test_file("tests/testthat/test-lookup_muni.R"))
function_coverage(fun='lookup_muni', test_file("tests/testthat/test-lookup_muni.R"))
function_coverage(fun='lookup_muni', test_file("tests/testthat/test-lookup_muni.R"))
function_coverage(fun='lookup_muni', test_file("tests/testthat/test-lookup_muni.R"))
function_coverage(fun='lookup_muni', test_file("tests/testthat/test-lookup_muni.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
expect_error(read_weighting_area(code_weighting="AC", year=9999999))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
expect_error(read_weighting_area(code_weighting="ACasdadasda", year=2010))
read_weighting_area(code_weighting="ACasdadasda", year=2010)
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
testthat::expect_output( read_weighting_area() )
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_state', test_file("tests/testthat/test-read_state.R"))
function_coverage(fun='read_state', test_file("tests/testthat/test-read_state.R"))
function_coverage(fun='read_state', test_file("tests/testthat/test-read_state.R"))
test_code <- read_state(code_state=11, year=2010)
# check number of weighting areas
expect_equal(nrow(test_code), 1)
# check projection
expect_equal(sf::st_crs(test_code)[[2]], "+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs")
function_coverage(fun='read_state', test_file("tests/testthat/test-read_state.R"))
function_coverage(fun='read_state', test_file("tests/testthat/test-read_state.R"))
testthat::expect_output( read_state(code_state=111111, year=1991) )
read_state(code_state=111111, year=1991)
function_coverage(fun='read_state', test_file("tests/testthat/test-read_state.R"))
read_state( year=1991)
read_state(code_state=NULL, year=1991)
function_coverage(fun='read_state', test_file("tests/testthat/test-read_state.R"))
function_coverage(fun='read_micro_region', test_file("tests/testthat/test-read_micro_region.R"))
function_coverage(fun='read_micro_region', test_file("tests/testthat/test-read_micro_region.R"))
function_coverage(fun='read_micro_region', test_file("tests/testthat/test-read_micro_region.R"))
function_coverage(fun='read_meso_region', test_file("tests/testthat/test-read_meso_region.R"))
testthat::expect_error( read_census_tract( ) )
read_census_tract( )
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
testthat::expect_error( read_census_tract(code_tract = "AP", zone = "ABCD") )
testthat::expect_error( read_census_tract(code_tract = "AP", year=2000, zone = "ABCD") )
read_census_tract(code_tract = "AP", year=2000, zone = "ABCD")
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
system.time(  geobr_cov <- covr::package_coverage() )
geobr_cov
beepr::beep()
# read data
test_sf <- lookup_muni(name_muni = "fortaleza")
test_sf2 <- lookup_muni(code_muni=2304400)
# read data
test_sf <- lookup_muni(name_muni = "fortaleza")
test_sf2 <- lookup_muni(code_muni=2304400)
test_sf3 <- lookup_muni(name_muni="all")
test_sf4 <- lookup_muni(code_muni="all")
# check sf object
expect_true(is(test_sf, "data.frame"))
expect_true(is(test_sf2, "data.frame"))
expect_true(is(test_sf3, "data.frame"))
expect_true(is(test_sf4, "data.frame"))
# check number of cols
expect_equal( ncol(test_sf), 13)
# When using two arguments (supposed to give a warning)
expect_warning(lookup_muni(name_muni="fortaleza", code_muni=2304400))
expect_warning( lookup_muni(name_muni="arroz", code_muni=2304400) )
# ERRORS and messagens  -----------------------
test_that("lookup_muni", {
expect_error(lookup_muni())
expect_error(lookup_muni(name_muni="arroz", code_muni=123213))
# Wrong name
expect_error(lookup_muni(name_muni="arroz"))
# Wrong code
expect_error(lookup_muni(code_muni=99999999))
})
test_that("lookup_muni", {
# read data
test_sf <- lookup_muni(name_muni = "fortaleza")
test_sf2 <- lookup_muni(code_muni=2304400)
test_sf3 <- lookup_muni(name_muni="all")
test_sf4 <- lookup_muni(code_muni="all")
# check sf object
expect_true(is(test_sf, "data.frame"))
expect_true(is(test_sf2, "data.frame"))
expect_true(is(test_sf3, "data.frame"))
expect_true(is(test_sf4, "data.frame"))
# check number of cols
expect_equal( ncol(test_sf), 13)
# When using two arguments (supposed to give a warning)
expect_warning(lookup_muni(name_muni="fortaleza", code_muni=2304400))
expect_warning( lookup_muni(name_muni="arroz", code_muni=2304400) )
})
# ERRORS and messagens  -----------------------
test_that("lookup_muni", {
expect_error(lookup_muni())
expect_error(lookup_muni(name_muni="arroz", code_muni=123213))
# Wrong name
expect_error(lookup_muni(name_muni="arroz"))
# Wrong code
expect_error(lookup_muni(code_muni=99999999))
})
<<<<<<< HEAD
=======
Sys.setenv(NOT_CRAN = "false")
system.time(  devtools::test(pkg = ".",  cran = TRUE) )
Sys.setenv(NOT_CRAN = "false")
system.time(  devtools::test(pkg = ".",  cran = TRUE) )
Sys.setenv(NOT_CRAN = "true")
system.time(  devtools::test(pkg = ".",  cran = TRUE) )
beepr::beep()
Sys.setenv(NOT_CRAN = "false")
system.time(  devtools::test(pkg = ".",  cran = TRUE) )
beepr::beep()
Sys.setenv(NOT_CRAN = "true")
system.time(  devtools::test(pkg = ".",  cran = TRUE) )
beepr::beep()
Sys.setenv(NOT_CRAN = "false")
system.time(  devtools::test(pkg = ".",  cran = TRUE) )
beepr::beep()
update <- 2012
library(RCurl)
library(stringr)
library(sf)
library(dplyr)
library(readr)
library(data.table)
library(magrittr)
library(lwgeom)
library(stringi)
###### 0. Create Root folder to save the data -----------------
# Root directory
root_dir <- "L:\\# DIRUR #\\ASMEQ\\geobr\\data-raw"
setwd(root_dir)
# Directory to keep raw zipped files
dir.create("./amazonia_legal")
destdir_raw <- paste0("./amazonia_legal/",update)
dir.create(destdir_raw)
#### 2. Unzipe shape files -----------------
setwd(destdir_raw)
# read data
temp_sf <- st_read("./amazonia_legal.shp", quiet = F, stringsAsFactors=F)
###### 0. Create Root folder to save the data -----------------
# Root directory
root_dir <- "L:\\# DIRUR #\\ASMEQ\\geobr\\data-raw"
setwd(root_dir)
# Directory to keep raw zipped files
dir.create("./amazonia_legal")
destdir_raw <- paste0("./amazonia_legal/",update)
dir.create(destdir_raw)
# Create folders to save clean sf.rds files  -----------------
dir.create("./amazonia_legal/shapes_in_sf_cleaned", showWarnings = FALSE)
destdir_clean <- paste0("./amazonia_legal/shapes_in_sf_cleaned/",update)
dir.create(destdir_clean)
#### 2. Unzipe shape files -----------------
setwd(destdir_raw)
# read data
temp_sf <- st_read("./amazonia_legal.shp", quiet = F, stringsAsFactors=F)
#### 0. Download original data sets from source website -----------------
# Download and read into CSV at the same time
ftp_shp <- 'http://mapas.mma.gov.br/ms_tmp/amazonia_legal.shp'
ftp_shx <- 'http://mapas.mma.gov.br/ms_tmp/amazonia_legal.shx'
ftp_dbf <- 'http://mapas.mma.gov.br/ms_tmp/amazonia_legal.dbf'
ftp <- c(ftp_shp,ftp_shx,ftp_dbf)
aux_ft <- c("shp","shx","dbf")
for(i in 1:length(ftp)){
download.file(url = ftp[i],
destfile = paste0(destdir_raw,"/","amazonia_legal.",aux_ft[i]) )
}
library(RCurl)
library(tidyverse)
library(stringr)
library(sf)
library(magrittr)
library(data.table)
library(parallel)
library(lwgeom)
library(geobr)
library(mapview)
# Root directory
root_dir <- "L:////# DIRUR #//ASMEQ//geobr//data-raw"
setwd(root_dir)
head_dir <- "L:////# DIRUR #//ASMEQ//geobr//data-raw//municipal_seat"
# head_dir <- "C:/Users/rafa/Desktop/data/municipal_seat"
dir.create(head_dir)
########  1. Unzip original data sets downloaded from IBGE -----------------
setwd(head_dir)
# List all zip files for all years
all_zipped_files <- list.files(full.names = T, recursive = T, pattern = ".zip")
add_state_abbrev <- function(temp_sf){
temp_sf <- temp_sf %>% mutate(abbrev_state =  ifelse(code_state== 11, "RO",
ifelse(code_state== 12, "AC",
ifelse(code_state== 13, "AM",
ifelse(code_state== 14, "RR",
ifelse(code_state== 15, "PA",
ifelse(code_state== 16, "AP",
ifelse(code_state== 17, "TO",
ifelse(code_state== 21, "MA",
ifelse(code_state== 22, "PI",
ifelse(code_state== 23, "CE",
ifelse(code_state== 24, "RN",
ifelse(code_state== 25, "PB",
ifelse(code_state== 26, "PE",
ifelse(code_state== 27, "AL",
ifelse(code_state== 28, "SE",
ifelse(code_state== 29, "BA",
ifelse(code_state== 31, "MG",
ifelse(code_state== 32, "ES",
ifelse(code_state== 33, "RJ",
ifelse(code_state== 35, "SP",
ifelse(code_state== 41, "PR",
ifelse(code_state== 42, "SC",
ifelse(code_state== 43, "RS",
ifelse(code_state== 50, "MS",
ifelse(code_state== 51, "MT",
ifelse(code_state== 52, "GO",
ifelse(code_state== 53, "DF",NA))))))))))))))))))))))))))))
return(temp_sf)
}
temp_sf$code_muni
>>>>>>> d3ef7cb8894b9af34e4d6c62ecfe6eec9529e2cc

ifelse(code_state== 32, "ES",
ifelse(code_state== 33, "RJ",
ifelse(code_state== 35, "SP",
ifelse(code_state== 41, "PR",
ifelse(code_state== 42, "SC",
ifelse(code_state== 43, "RS",
ifelse(code_state== 50, "MS",
ifelse(code_state== 51, "MT",
ifelse(code_state== 52, "GO",
ifelse(code_state== 53, "DF",NA))))))))))))))))))))))))))))
return(temp_sf)
}
###### Add Region info -----------------
add_region_info <- function(temp_sf, column){
# add code_region
temp_sf$code_region <- substr( temp_sf[[ column ]] , 1,1) %>% as.numeric()
# add name_region
temp_sf <- temp_sf %>% mutate(name_region = ifelse(code_region==1, 'Norte',
ifelse(code_region==2, 'Nordeste',
ifelse(code_region==3, 'Sudeste',
ifelse(code_region==4, 'Sul',
ifelse(code_region==5, 'Centro Oeste', NA))))))
return(temp_sf)
}
###### Use UTF-8 encoding -----------------
use_encoding_utf8 <- function(temp_sf){
temp_sf <- temp_sf %>%
mutate_if(is.factor, function(x){ x %>% as.character() %>%
stringi::stri_encode("UTF-8") } )
return(temp_sf)
}
###### convert to MULTIPOLYGON -----------------
to_multipolygon <- function(temp_sf){
if( st_geometry_type(temp_sf) %>% unique() %>% as.character() %>% length() > 1 |
any(  !( st_geometry_type(temp_sf) %>% unique() %>% as.character() %like% "MULTIPOLYGON|GEOMETRYCOLLECTION"))) {
# remove linstring
temp_sf <- subset(temp_sf, st_geometry_type(temp_sf) %>% as.character() != "LINESTRING")
temp_sf <- sf::st_cast(temp_sf, "MULTIPOLYGON")
return(temp_sf)
}else{ return(temp_sf)}}
###### Simplify temp_sf -----------------
simplify_temp_sf <- function(temp_sf, tolerance=100){
# reproject to utm
temp_gpkg_simplified <- sf::st_transform(temp_sf, crs=3857)
# simplify with tolerance
temp_gpkg_simplified <- sf::st_simplify(temp_gpkg_simplified, preserveTopology = T, dTolerance = tolerance)
# reproject to utm
temp_gpkg_simplified <- sf::st_transform(temp_gpkg_simplified, crs=4674)
# Make any invalid geometry valid # st_is_valid( sf)
temp_gpkg_simplified <- sf::st_make_valid(temp_gpkg_simplified)
return(temp_gpkg_simplified)
}
###### Dissolve borders temp_sf -----------------
## Function to clean and dissolve the borders of polygons by groups
dissolve_polygons <- function(mysf, group_column){
# a) make sure we have valid geometries
temp_sf <- sf::st_make_valid(mysf)
temp_sf <- temp_sf %>% st_buffer(0)
# b) make sure we have sf MULTIPOLYGON
temp_sf1 <- temp_sf %>% st_cast("MULTIPOLYGON")
# c) long but complete dissolve function
dissolvefun <- function(grp){
# c.1) subset region
temp_region <- subset(mysf, get(group_column, mysf)== grp )
# c.2) create attribute with the number of points each polygon has
points_in_each_polygon = sapply(1:dim(temp_region)[1], function(i)
length(st_coordinates(temp_region$geom[i])))
temp_region$points_in_each_polygon <- points_in_each_polygon
mypols <- subset(temp_region, points_in_each_polygon > 0)
# d) convert to sp
sf_regiona <- mypols %>% as("Spatial")
sf_regiona <- rgeos::gBuffer(sf_regiona, byid=TRUE, width=0) # correct eventual topology issues
# c) dissolve borders to create country file
result <- maptools::unionSpatialPolygons(sf_regiona, rep(TRUE, nrow(sf_regiona@data))) # dissolve
# d) get rid of holes
outerRings = Filter(function(f){f@ringDir==1},result@polygons[[1]]@Polygons)
outerBounds = sp::SpatialPolygons(list(sp::Polygons(outerRings,ID=1)))
# e) convert back to sf data
outerBounds <- st_as_sf(outerBounds)
outerBounds <- st_set_crs(outerBounds, st_crs(mysf))
st_crs(outerBounds) <- st_crs(mysf)
# retrieve code_region info and reorder columns
outerBounds <- dplyr::mutate(outerBounds, group_column = grp)
outerBounds <- dplyr::select(outerBounds, group_column, geometry)
names(outerBounds)[1] <- group_column
return(outerBounds)
}
# Apply sub-function
groups_sf <- lapply(X = unique(get(group_column, mysf)), FUN = dissolvefun )
# rbind results
temp_sf <- do.call('rbind', groups_sf)
return(temp_sf)
}
# # test
# states <- geobr::read_state()
# a <- dissolve_polygons(states, group_column='code_region')
# plot(a)
use_encoding_utf8(df)
df <- utils::read.csv(system.file("extdata/br_states_lifexpect2017.csv", package = "geobr"))
head(df)
use_encoding_utf8(df)
use_encoding_utf8 <- function(temp_sf){
temp_sf <- temp_sf %>%
mutate_if(is.factor, function(x){
x %>% as.character() %>% stringi::stri_encode("UTF-8") } )
temp_sf <- temp_sf %>%
mutate_if(is.character, function(x){
x %>% as.character() %>% stringi::stri_encode("UTF-8") } )
return(temp_sf)
}
df
df <- utils::read.csv(system.file("extdata/br_states_lifexpect2017.csv", package = "geobr"), encoding = "UTF-8")
df
use_encoding_utf8(df)
df
use_encoding_utf8 <- function(temp_sf){
temp_sf <- temp_sf %>%
mutate_if(is.factor, function(x){
x %>% as.character() %>% stringi::stri_encode("UTF-8") } )
temp_sf <- temp_sf %>%
mutate_if(is.character, function(x){
x  %>% stringi::stri_encode("UTF-8") } )
return(temp_sf)
}
df <- utils::read.csv(system.file("extdata/br_states_lifexpect2017.csv", package = "geobr"))
head(df)
use_encoding_utf8(df)
df <- utils::read.csv(system.file("extdata/br_states_lifexpect2017.csv", package = "geobr"), encoding = "UTF-8")
head(df)
use_encoding_utf8(df)
stringi::stri_enc_detect(df)
stringi::stri_enc_detect(df$uf)
df <- utils::read.csv(system.file("extdata/br_states_lifexpect2017.csv", package = "geobr"))
df
stringi::stri_enc_detect(df$uf)
df <- utils::read.csv(system.file("extdata/br_states_lifexpect2017.csv", package = "geobr"), encoding = "ISO-8859-1")
df
e
df <- utils::read.csv(system.file("extdata/br_states_lifexpect2017.csv", package = "geobr"), encoding = "ISO-8859-1")
df
stringi::stri_enc_detect(df$uf)
df
use_encoding_utf8(df)
class(df$uf)
df <- utils::read.csv(system.file("extdata/br_states_lifexpect2017.csv", package = "geobr"), encoding = "ISO-8859-1")
class(df$uf)
df <- utils::read.csv(system.file("extdata/br_states_lifexpect2017.csv", package = "geobr"), encoding = "ISO-8859-1")
df
enc2utf8(df$ESPVIDA2017)
clasS(df$uf)
df <- utils::read.csv(system.file("extdata/br_states_lifexpect2017.csv", package = "geobr"), encoding = "ISO-8859-1")
df
enc2utf8(df$uf)
df$uf <- enc2utf8(df$uf)
df
df$uf <- enc2utf8(df$uf)
Encoding((df$uf))
stringi::stri_enc_detect(df$uf)
write.csv(df, 'br_states_lifexpect2017.csv', fileEncoding = "UTF-8")
df2 <- utils::read.csv( "br_states_lifexpect2017.csv" )
head(df2)
df2 <- utils::read.csv( "br_states_lifexpect2017.csv", encoding = "UTF-8")
head(df2)
library(geobr)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(geobr)
library(ggplot2)
library(sf)
library(dplyr)
# Available data sets
datasets <- list_geobr()
print(datasets, n=21)
meso <- read_intermediate_region(year=2017)
states <- read_state(year=2019)
# Remove plot axis
no_axis <- theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
# Plot all Brazilian states
ggplot() +
geom_sf(data=states, fill="#2D3E50", color="#FEBF57", size=.15, show.legend = FALSE) +
labs(subtitle="States", size=8) +
theme_minimal() +
no_axis
library(ggplot2)
# Download all municipalities of Rio
all_muni <- read_municipality( code_muni = "RJ", year= 2010)
# plot
ggplot() +
geom_sf(data=all_muni, fill="#2D3E50", color="#FEBF57", size=.15, show.legend = FALSE) +
labs(subtitle="Municipalities of Rio de Janeiro, 2000", size=8) +
theme_minimal() +
no_axis
df <- utils::read.csv(system.file("extdata/br_states_lifexpect2017.csv", package = "geobr"), encoding = "UTF-8")
df
# Read data.frame with life expectancy data
df <- utils::read.csv(system.file("extdata/br_states_lifexpect2017.csv", package = "geobr"), encoding = "UTF-8")
states$name_state <- tolower(states$name_state)
df$uf <- tolower(df$uf)
# join the databases
states <- dplyr::left_join(states, df, by = c("name_state" = "uf"))
ggplot() +
geom_sf(data=states, aes(fill=ESPVIDA2017), color= NA, size=.15) +
labs(subtitle="Life Expectancy at birth, Brazilian States, 2014", size=8) +
scale_fill_distiller(palette = "Blues", name="Life Expectancy", limits = c(65,80)) +
theme_minimal() +
no_axis
stringi::stri_enc_detect(df$uf)
Encoding(df$X)
Encoding(df$x)
Encoding(df$x) <- "UTF-8"
Encoding(df$uf)
Encoding(df$uf) <- "UTF-8"
Encoding(df$uf)
df$uf
# test server connection
meta_link <- url('http://www.ipea.gov.br/geobr/metadata/metadata_gpkg.csv')
# test server connection
metadata_link <- 'http://www.ipea.gov.br/geobr/metadata/metadata_gpkg.csv'
t <- try( open.connection(con = url(metadata_link), open="rt", timeout=2),silent=T)
if("try-error" %in% class(t)){stop('Internet connection problem. If this is
not a connection problem in your network,
please try geobr again in a few minutes.')}
suppressWarnings(try(close.connection(conn),silent=T))
# download it and save to metadata
httr::GET(url= metadata_link, httr::write_disk(tempf, overwrite = T))
#' @export
#' @family general support functions
#' @examples \donttest{
#'
#' library(geobr)
#'
#' df <- download_metadata()
#'
#' }
#'
download_metadata <- function(){
# create tempfile to save metadata
tempf <- file.path(tempdir(), "metadata.csv")
# check if metadata has already been downloaded
if (file.exists(tempf)) {
metadata <- utils::read.csv(tempf, stringsAsFactors=F)
} else {
# test server connection
metadata_link <- 'http://www.ipea.gov.br/geobr/metadata/metadata_gpkg.csv'
t <- try( open.connection(con = url(metadata_link), open="rt", timeout=2),silent=T)
if("try-error" %in% class(t)){stop('Internet connection problem. If this is
not a connection problem in your network,
please try geobr again in a few minutes.')}
suppressWarnings(try(close.connection(conn),silent=T))
# download it and save to metadata
httr::GET(url= metadata_link, httr::write_disk(tempf, overwrite = T))
metadata <- utils::read.csv(tempf, stringsAsFactors=F)
}
#' @export
#' @family general support functions
#' @examples \donttest{
#'
#' library(geobr)
#'
#' df <- download_metadata()
#'
#' }
#'
download_metadata <- function(){
# create tempfile to save metadata
tempf <- file.path(tempdir(), "metadata.csv")
# check if metadata has already been downloaded
if (file.exists(tempf)) {
metadata <- utils::read.csv(tempf, stringsAsFactors=F)
} else {
# test server connection
metadata_link <- 'http://www.ipea.gov.br/geobr/metadata/metadata_gpkg.csv'
t <- try( open.connection(con = url(metadata_link), open="rt", timeout=2),silent=T)
if("try-error" %in% class(t)){stop('Internet connection problem. If this is
not a connection problem in your network,
please try geobr again in a few minutes.')}
suppressWarnings(try(close.connection(conn),silent=T))
# download it and save to metadata
httr::GET(url= metadata_link, httr::write_disk(tempf, overwrite = T))
metadata <- utils::read.csv(tempf, stringsAsFactors=F)
}
download_metadata <- function(){
# create tempfile to save metadata
tempf <- file.path(tempdir(), "metadata.csv")
# check if metadata has already been downloaded
if (file.exists(tempf)) {
metadata <- utils::read.csv(tempf, stringsAsFactors=F)
} else {
# test server connection
metadata_link <- 'http://www.ipea.gov.br/geobr/metadata/metadata_gpkg.csv'
t <- try( open.connection(con = url(metadata_link), open="rt", timeout=2),silent=T)
if("try-error" %in% class(t)){stop('Internet connection problem. If this is
not a connection problem in your network,
please try geobr again in a few minutes.')}
suppressWarnings(try(close.connection(conn),silent=T))
# download it and save to metadata
httr::GET(url= metadata_link, httr::write_disk(tempf, overwrite = T))
metadata <- utils::read.csv(tempf, stringsAsFactors=F)
}
return(metadata)
}
download_metadata()
download_metadata()
library(RCurl)
library(stringr)
library(sf)
library(dplyr)
library(readr)
library(data.table)
library(magrittr)
library(lwgeom)
library(stringi)
source("./prep_data/prep_functions.R")
update <- 2020
source("./prep_data/prep_functions.R")
df <- fread('Análise - Tabela da lista das escolas - Detalhado (1).csv')
df <- fread('C:/Users/user/Downloads/Análise - Tabela da lista das escolas - Detalhado (1).csv')
df2 <- fread('C:/Users/user/Downloads/Análise - Tabela da lista das escolas - Detalhado.csv')
update <- 2020
df <- fread('C:/Users/user/Downloads/Análise - Tabela da lista das escolas - Detalhado (1).csv')
library(sfheaders)
head(df)
df <- fread('C:/Users/user/Downloads/Análise - Tabela da lista das escolas - Detalhado (1).csv',
encoding = 'UTF-8')
head(df)
names(df)
df
dplyr::select(df, 'Restrição de Atendimento' = a)
dplyr::select(df, a ='Restrição de Atendimento')
s <- geobr::read_state()
s
head(df)
head(s)
s <- geobr::read_municipality()
s
head(df)
table(df$Localização)
table(df$Localidade)
table(df$`Categoria Escola Privada`)
df2 <-
dplyr::select(df,
abbrev_state = 'UF',
name_muni = 'Município',
code_school = 'Código INEP',
name_school = 'Escola',
education_level = 'Etapas e Modalidade de Ensino Oferecidas',
education_others = 'Outras Ofertas Educacionais',
admin_category = 'Categoria Administrativa',
address = 'Endereço',
phone_number = 'Telefone',
government_level = 'Dependência Administrativa',
private_school_type = 'Categoria Escola Privada',
conveniada_governo = 'Conveniada Poder Público',
regulated_education_counsel = 'Regulamentação pelo Conselho de Educação',
service_restriction ='Restrição de Atendimento',
size = 'Porte da Escola',
urban = 'Localização',
location = 'Localidade',
y = 'Latitude',
x = 'Longitude'
)
df2 <-
dplyr::select(df,
abbrev_state = 'UF',
name_muni = 'Município',
code_school = 'Código INEP',
name_school = 'Escola',
education_level = 'Etapas e Modalidade de Ensino Oferecidas',
education_others = 'Outras Ofertas Educacionais',
admin_category = 'Categoria Administrativa',
address = 'Endereço',
phone_number = 'Telefone',
government_level = 'Dependência Administrativa',
private_school_type = 'Categoria Escola Privada',
conveniada_governo = 'Conveniada Poder Público',
regulated_education_counsel = 'Regulamentação pelo Conselho de Educação',
service_restriction ='Restrição de Atendimento',
size = 'Porte da Escola',
urban = 'Localização',
location = 'Localidade Diferenciada',
y = 'Latitude',
x = 'Longitude'
)
schools_sf <- sfheaders::sf_point(df2, x=x, y=y)
schools_sf <- sfheaders::sf_point(df2, x='x', y='y')
schools_sf
geobr::read_state()
st_crs(geobr::read_amazon())
st_crs(schools_sf) <- st_crs(geobr::read_amazon())
sirgas <- st_crs(geobr::read_amazon())
st_crs(schools_sf) <- sirgas
st_crs(schools_sf)
library(mapview)
mapviewOptions(platform = 'leafgl')
mapview(schools_sf)
head(schools_sf)
schools_sf <- sfheaders::sf_point(df2, x='x', y='y', keep = T)
sirgas <- st_crs(geobr::read_amazon())
st_crs(schools_sf) <- sirgas
st_crs(schools_sf)
head(schools_sf)
mapview(schools_sf)
a <- schools_sf[1:5,]
plot(a)
# fix spatial coordinates
summary(df2$x)
plot(a)
mapview(a)
subset(df2, is.na(x))
schools_sf <- sfheaders::sf_point(subset(df2, is.na(x)), x='x', y='y', keep = T)
schools_sf
a <- schools_sf[1:5,]
plot(a)
mapview(a)
schools_sf <- sfheaders::sf_point(df2, x='x', y='y', keep = T)
a <- schools_sf[1:5,]
plot(a)
mapview(a)
st_crs(schools_sf) <- sirgas
st_crs(schools_sf)
head(schools_sf)
a <- schools_sf[1:5,]
plot(a)
mapview(a)
a <- schools_sf[1:5000,]
plot(a)
mapview(a)
mapviewOptions(platform = 'mapdeck')
mapview(a)
st_crs(schools_sf)
View(harmonize_projection)
st_crs(schools_sf) <- 4674
a <- schools_sf[1:5,]
plot(a)
mapview(a)
#> DATASET: schools 2020
#> Source: INEP - http://portal.inep.gov.br/web/guest/dados/catalogo-de-escolas
#: scale
#> Metadata:
# Titulo: schools
#' Frequencia de atualizacao: anual
#'
#' Forma de apresentação: Shape
#' Linguagem: Pt-BR
#' Character set: Utf-8
#'
#' Resumo: Pontos com coordenadas gegráficas das escolas do censo escolar
#' Informações adicionais: Dados produzidos pelo INEP. Os dados de escolas e sua
#' geolocalização são atualizados pelo INEP continuamente. Para finalidade do geobr,
#' esses dados precisam ser baixados uma vez ao ano
#
### Libraries (use any library as necessary)
library(RCurl)
library(stringr)
library(sf)
library(dplyr)
library(readr)
library(data.table)
library(magrittr)
library(lwgeom)
library(stringi)
library(sfheaders)
library(mapview)
mapviewOptions(platform = 'leafgl')
mapviewOptions(platform = 'mapdeck')
mapviewOptions(platform = 'mapdeck')
source("./prep_data/prep_functions.R")
df <- fread('C:/Users/user/Downloads/Análise - Tabela da lista das escolas - Detalhado (1).csv',
encoding = 'UTF-8')
head(df)
table(df$`Etapas e Modalidade de Ensino Oferecidas`)
table(df$`Outras Ofertas Educacionais`)
table(df$`Regulamentação pelo Conselho de Educação`)
table(df$`Localização`)
table(df$`Localidade Diferenciada`)
df2 <-
dplyr::select(df,
abbrev_state = 'UF',
name_muni = 'Município',
code_school = 'Código INEP',
name_school = 'Escola',
education_level = 'Etapas e Modalidade de Ensino Oferecidas',
education_level_others = 'Outras Ofertas Educacionais',
admin_category = 'Categoria Administrativa',
address = 'Endereço',
phone_number = 'Telefone',
government_level = 'Dependência Administrativa',
private_school_type = 'Categoria Escola Privada',
private_government_partnership = 'Conveniada Poder Público',
regulated_education_counsil = 'Regulamentação pelo Conselho de Educação',
service_restriction ='Restrição de Atendimento',
size = 'Porte da Escola',
urban = 'Localização',
location_type = 'Localidade Diferenciada',
y = 'Latitude',
x = 'Longitude'
)
table(df2$urban, useNA = 'always')
install.packages(c("blogdown", "broom", "callr", "clipr", "coda", "cpp11", "geojsonsf", "htmlwidgets", "ps", "quantreg", "ragg", "readr", "rgdal", "rlang", "rmarkdown", "RSQLite", "servr", "sp"))
install.packages(c("readr", "rlang", "sp"))
library(geobr)
tictoc::tic()
devtools::check(pkg = ".",  cran = TRUE, env_vars = c(NOT_CRAN = "false"))
tictoc::toc()
tictoc::tic()
devtools::check(pkg = ".",  cran = FALSE, env_vars = c(NOT_CRAN = "true"))
tictoc::toc()
419.6/60

temp_gpkg_simplified <- lwgeom::st_make_valid(temp_gpkg_simplified)
simplified_file_address
gc()
library(geobr)
library(magrittr)
library(sf)
library(beepr)
library(furrr)
library(mapview)
library(rmapshaper)
library(magrittr)
o <- geobr::read_metro_area(year=2013, tp = "original")
a <- geobr::read_metro_area(year=2013, tp = "simplified")
o <- subset(o, name_metro == "RM São Paulo")
a <- subset(a, name_metro == "RM São Paulo")
# simplify
system.time(  b <- st_transform(o, crs=3857) %>% sf::st_simplify(preserveTopology = T, dTolerance = 500) %>% st_transform(crs=4674) )
# save data
sf::st_write(o, 'test.gpkg')
sf::st_write(b, 'test_simplified500.gpkg')
# simplify
system.time(  b <- st_transform(o, crs=3857) %>% sf::st_simplify(preserveTopology = T, dTolerance = 50) %>% st_transform(crs=4674) )
sf::st_write(b, 'test_simplified50.gpkg')
# simplify
system.time(  b <- st_transform(o, crs=3857) %>% sf::st_simplify(preserveTopology = T, dTolerance = 10) %>% st_transform(crs=4674) )
sf::st_write(b, 'test_simplified10.gpkg')
# simplify
system.time(  b <- st_transform(o, crs=3857) %>% sf::st_simplify(preserveTopology = T, dTolerance = 50) %>% st_transform(crs=4674) )
as.numeric(object.size(b)) / as.numeric(object.size(o)) # reducao em __ vezes
mapview(o) + a + b
b <- lwgeom::st_make_valid(b)
mapview(o) + a + b
simplified_files <- list.files(path = '//storage1/geobr/data_gpkg', pattern = 'simplified', recursive = T, full.names = T)
file_address <- simplified_files[1]
tolerance=50
# get address of original file
simplified_file_address <- file_address
original_file_address <- gsub('_simplified.gpkg', '.gpkg', simplified_file_address)
simplified_file_address
simplified_files
# get address of original file
simplified_file_address <- file_address <- simplified_files[84]
original_file_address <- gsub('_simplified.gpkg', '.gpkg', simplified_file_address)
# read original file
temp_gpkg <- sf::st_read(original_file_address)
head(temp_gpkg)
plot(temp_gpkg)
simplified_file_address
# get address of original file
simplified_file_address <- file_address <- simplified_files[106]
original_file_address <- gsub('_simplified.gpkg', '.gpkg', simplified_file_address)
source('L:/# RAFAEL HENRIQUE MORAES PEREIRA #/git/geobr/r-package/prep_data/tests_st_simplify.R', encoding = 'UTF-8', echo=TRUE)
simplified_file_address
original_file_address
# read original file
temp_gpkg <- sf::st_read(original_file_address)
# simplify with tolerance
temp_gpkg_simplified <- st_transform(temp_gpkg, crs=3857) %>% sf::st_simplify(preserveTopology = T, dTolerance = tolerance) %>% st_transform(crs=4674)
# Make any invalid geometry valid # st_is_valid( sf)
temp_gpkg_simplified <- lwgeom::st_make_valid(temp_gpkg_simplified)
simplified_file_address
sf::st_write(temp_gpkg_simplified, simplified_file_address)
mapview(temp_gpkg_simplified)
# simplify
system.time(  b <- st_transform(o, crs=3857) %>% sf::st_simplify(preserveTopology = T, dTolerance = 100) %>% st_transform(crs=4674) )
# Make any invalid geometry valid # st_is_valid( sf)
b <- lwgeom::st_make_valid(b)
sf::st_write(b, 'test_simplified100.gpkg')
mapview(b)
tolerance=100
# simplify with tolerance
temp_gpkg_simplified <- st_transform(temp_gpkg, crs=3857) %>% sf::st_simplify(preserveTopology = T, dTolerance = tolerance) %>% st_transform(crs=4674)
# Make any invalid geometry valid # st_is_valid( sf)
temp_gpkg_simplified <- lwgeom::st_make_valid(temp_gpkg_simplified)
# save simplified file
sf::st_write(temp_gpkg_simplified, simplified_file_address)
tolerance
temp_gpkg_simplified <- st_transform(temp_gpkg, crs=3857) %>% sf::st_simplify(preserveTopology = T, dTolerance = 500) %>% st_transform(crs=4674)
# Make any invalid geometry valid # st_is_valid( sf)
temp_gpkg_simplified <- lwgeom::st_make_valid(temp_gpkg_simplified)
# save simplified file
sf::st_write(temp_gpkg_simplified, simplified_file_address)
library(magrittr)
# simplify with tolerance
temp_gpkg_simplified <- st_transform(temp_gpkg, crs=3857) %>% sf::st_simplify(preserveTopology = T, dTolerance = 500) %>% st_transform(crs=4674)
# Make any invalid geometry valid # st_is_valid( sf)
temp_gpkg_simplified <- lwgeom::st_make_valid(temp_gpkg_simplified)
# save simplified file
sf::st_write(temp_gpkg_simplified, simplified_file_address)
# simplify with tolerance
temp_gpkg_simplified <- st_transform(temp_gpkg, crs=3857) %>% sf::st_simplify(preserveTopology = T, dTolerance = 500) %>% st_transform(crs=4674)
# Make any invalid geometry valid # st_is_valid( sf)
temp_gpkg_simplified <- lwgeom::st_make_valid(temp_gpkg_simplified)
# save simplified file
sf::st_write(temp_gpkg_simplified, simplified_file_address)
# read original file
temp_gpkg <- sf::st_read(original_file_address)
# simplify with tolerance
temp_gpkg_simplified <- st_transform(temp_gpkg, crs=3857) %>% sf::st_simplify(preserveTopology = T, dTolerance = 500) %>% st_transform(crs=4674)
# Make any invalid geometry valid # st_is_valid( sf)
temp_gpkg_simplified <- lwgeom::st_make_valid(temp_gpkg_simplified)
# save simplified file
sf::st_write(temp_gpkg_simplified, simplified_file_address, overwrite = T)
# simplify with tolerance
temp_gpkg_simplified <- st_transform(temp_gpkg, crs=3857) %>% sf::st_simplify(preserveTopology = T, dTolerance = 500) %>% st_transform(crs=4674)
# Make any invalid geometry valid # st_is_valid( sf)
temp_gpkg_simplified <- lwgeom::st_make_valid(temp_gpkg_simplified)
# save simplified file
sf::st_write(temp_gpkg_simplified, simplified_file_address, overwrite = T)
# simplify with tolerance
temp_gpkg_simplified <- st_transform(temp_gpkg, crs=3857) %>% sf::st_simplify(preserveTopology = T, dTolerance = 500) %>% st_transform(crs=4674)
# Make any invalid geometry valid # st_is_valid( sf)
temp_gpkg_simplified <- lwgeom::st_make_valid(temp_gpkg_simplified)
# save simplified file
sf::st_write(temp_gpkg_simplified, simplified_file_address)
temp_gpkg_simplified <- st_transform(temp_gpkg, crs=3857) %>% sf::st_simplify(preserveTopology = T, dTolerance = 100) %>% st_transform(crs=4674)
# Make any invalid geometry valid # st_is_valid( sf)
temp_gpkg_simplified <- lwgeom::st_make_valid(temp_gpkg_simplified)
# save simplified file
sf::st_write(temp_gpkg_simplified, simplified_file_address)
# simplify with tolerance
temp_gpkg_simplified <- st_transform(temp_gpkg, crs=3857) %>% sf::st_simplify(preserveTopology = T, dTolerance = 50) %>% st_transform(crs=4674)
# Make any invalid geometry valid # st_is_valid( sf)
temp_gpkg_simplified <- lwgeom::st_make_valid(temp_gpkg_simplified)
# save simplified file
sf::st_write(temp_gpkg_simplified, simplified_file_address)
# simplify with tolerance
temp_gpkg_simplified <- st_transform(temp_gpkg, crs=3857) %>% sf::st_simplify(preserveTopology = T, dTolerance = 200) %>% st_transform(crs=4674)
# simplify with tolerance
temp_gpkg_simplified <- st_transform(temp_gpkg, crs=3857) %>% sf::st_simplify(preserveTopology = T, dTolerance = 200) %>% st_transform(crs=4674)
# Make any invalid geometry valid # st_is_valid( sf)
temp_gpkg_simplified <- lwgeom::st_make_valid(temp_gpkg_simplified)
# save simplified file
sf::st_write(temp_gpkg_simplified, simplified_file_address)
# save simplified file
sf::st_write(temp_gpkg_simplified, simplified_file_address)
# simplify with tolerance
temp_gpkg_simplified <- st_transform(temp_gpkg, crs=3857) %>% sf::st_simplify(preserveTopology = T, dTolerance = 200) %>% st_transform(crs=4674)
# Make any invalid geometry valid # st_is_valid( sf)
temp_gpkg_simplified <- lwgeom::st_make_valid(temp_gpkg_simplified)
as.numeric(object.size(temp_gpkg_simplified)) / as.numeric(object.size(temp_gpkg)) # reducao em __ vezes
# save simplified file
sf::st_write(temp_gpkg_simplified, simplified_file_address)
# simplify with tolerance
temp_gpkg_simplified <- st_transform(temp_gpkg, crs=3857) %>% sf::st_simplify(preserveTopology = T, dTolerance = 100) %>% st_transform(crs=4674)
# Make any invalid geometry valid # st_is_valid( sf)
temp_gpkg_simplified <- lwgeom::st_make_valid(temp_gpkg_simplified)
as.numeric(object.size(temp_gpkg_simplified)) / as.numeric(object.size(temp_gpkg)) # reducao em __ vezes
mapview(temp_gpkg_simplified)
simplified_files
# get address of original file
simplified_file_address <- file_address <- simplified_files[1]
original_file_address <- gsub('_simplified.gpkg', '.gpkg', simplified_file_address)
original_file_address
head(simplified_files)
# get address of original file
simplified_file_address <- file_address <- simplified_files[3]
original_file_address <- gsub('_simplified.gpkg', '.gpkg', simplified_file_address)
original_file_address
# read original file
temp_gpkg <- sf::st_read(original_file_address)
# simplify with tolerance
temp_gpkg_simplified <- st_transform(temp_gpkg, crs=3857) %>% sf::st_simplify(preserveTopology = T, dTolerance = 500) %>% st_transform(crs=4674)
# Make any invalid geometry valid # st_is_valid( sf)
temp_gpkg_simplified <- lwgeom::st_make_valid(temp_gpkg_simplified)
as.numeric(object.size(temp_gpkg_simplified)) / as.numeric(object.size(temp_gpkg)) # reducao em __ vezes
mapview(temp_gpkg)
head(temp_gpkg_simplified)
mapview(temp_gpkg) + temp_gpkg_simplified
# simplify with tolerance
temp_gpkg_simplified <- st_transform(temp_gpkg, crs=3857) %>% sf::st_simplify(preserveTopology = T, dTolerance = 100) %>% st_transform(crs=4674)
# Make any invalid geometry valid # st_is_valid( sf)
temp_gpkg_simplified <- lwgeom::st_make_valid(temp_gpkg_simplified)
as.numeric(object.size(temp_gpkg_simplified)) / as.numeric(object.size(temp_gpkg)) # reducao em __ vezes
class(temp_gpkg_simplified)
# simplify with tolerance
temp_gpkg_simplified <- st_transform(temp_gpkg, crs=3857) %>% sf::st_simplify(preserveTopology = T, dTolerance = 100) %>% st_transform(crs=4674)
# Make any invalid geometry valid # st_is_valid( sf)
temp_gpkg_simplified <- lwgeom::st_make_valid(temp_gpkg_simplified)
as.numeric(object.size(temp_gpkg_simplified)) / as.numeric(object.size(temp_gpkg)) # reducao em __ vezes
# save simplified file
sf::st_write(temp_gpkg_simplified, simplified_file_address, quiet = TRUE)
mapview(temp_gpkg) + temp_gpkg_simplified
sf::st_write(temp_gpkg_simplified, simplified_file_address, quiet = TRUE)
# delete previous file
file.remove(simplified_file_address)
# save simplified file
sf::st_write(temp_gpkg_simplified, simplified_file_address, quiet = TRUE)
simplify_gpkg <- function(file_address, tolerance=100){
# get address of original file
simplified_file_address <- file_address
original_file_address <- gsub('_simplified.gpkg', '.gpkg', simplified_file_address)
# read original file
temp_gpkg <- sf::st_read(original_file_address)
# simplify with tolerance
temp_gpkg_simplified <- sf::st_transform(temp_gpkg, crs=3857)
temp_gpkg_simplified <- sf::st_simplify(temp_gpkg_simplified, preserveTopology = T, dTolerance = tolerance)
temp_gpkg_simplified <- sf::st_transform(temp_gpkg_simplified, crs=4674)
# Make any invalid geometry valid # st_is_valid( sf)
temp_gpkg_simplified <- lwgeom::st_make_valid(temp_gpkg_simplified)
as.numeric(object.size(temp_gpkg_simplified)) / as.numeric(object.size(temp_gpkg)) # reducao em __ vezes
mapview(temp_gpkg) + temp_gpkg_simplified
# delete previous file
file.remove(simplified_file_address)
# save simplified file
sf::st_write(temp_gpkg_simplified, simplified_file_address, quiet = TRUE)
}
simplify_gpkg( simplified_files[3] )
simplify_gpkg <- function(file_address, tolerance=100){
# get address of original file
simplified_file_address <- file_address
original_file_address <- gsub('_simplified.gpkg', '.gpkg', simplified_file_address)
# read original file
temp_gpkg <- sf::st_read(original_file_address)
# simplify with tolerance
temp_gpkg_simplified <- sf::st_transform(temp_gpkg, crs=3857)
temp_gpkg_simplified <- sf::st_simplify(temp_gpkg_simplified, preserveTopology = T, dTolerance = tolerance)
temp_gpkg_simplified <- sf::st_transform(temp_gpkg_simplified, crs=4674)
# Make any invalid geometry valid # st_is_valid( sf)
temp_gpkg_simplified <- lwgeom::st_make_valid(temp_gpkg_simplified)
as.numeric(object.size(temp_gpkg_simplified)) / as.numeric(object.size(temp_gpkg)) # reducao em __ vezes
mapview(temp_gpkg) + temp_gpkg_simplified
# delete previous file
message('deleting old file')
file.remove(simplified_file_address)
# save simplified file
message('saving new file')
sf::st_write(temp_gpkg_simplified, simplified_file_address, quiet = TRUE)
}
simplify_gpkg( simplified_files[3] )
simplified_file_address
temp_gpkg_simplified
sf::st_write(temp_gpkg_simplified, simplified_file_address, quiet = TRUE)
simplify_gpkg( simplified_files[3] )
library(geobr)
library(magrittr)
library(sf)
library(beepr)
library(furrr)
library(mapview)
library(rmapshaper)
library(magrittr)
# list all simplified data sets
simplified_files <- list.files(path = '//storage1/geobr/data_gpkg', pattern = 'simplified', recursive = T, full.names = T)
simplified_files
simplified_files
2+2
#library(magrittr)
library(sf)
library(dplyr)
library(data.table)
library(geobr)
library(ggplot2)
library(mapview)
library(covr)
library(testthat)
library(geobr)
Sys.setenv(NOT_CRAN = "true")
function_coverage(fun=geobr::read_amazon, test_file("tests/testthat/test-read_amazon.R"))
function_coverage(fun=geobr::read_semiarid, test_file("tests/testthat/test-read_semiarid.R"))
function_coverage(fun=geobr::read_conservation_units, test_file("tests/testthat/test-read_conservation_units.R"))
function_coverage(fun='list_geobr', test_file("tests/testthat/test-list_geobr.R"))
function_coverage(fun='lookup_muni', test_file("tests/testthat/test-lookup_muni.R"))
function_coverage(fun='download_metadata', test_file("tests/testthat/test-download_metadata.R"))
2+2
2+2
library(covr)
library(testthat)
library(geobr)
library(geobr)
Sys.setenv(NOT_CRAN = "true")
function_coverage(fun=geobr::read_amazon, test_file("tests/testthat/test-read_amazon.R"))
function_coverage(fun='download_metadata', test_file("tests/testthat/test-download_metadata.R"))
data_type=TRUE
# Get metadata with data addresses
tempf <- file.path(tempdir(), "metadata.csv")
# check if metadata has already been downloaded
if (file.exists(tempf)) {
metadata <- utils::read.csv(tempf, stringsAsFactors=F)
} else {
# download it and save to metadata
httr::GET(url="http://www.ipea.gov.br/geobr/metadata/metadata_gpkg.csv", httr::write_disk(tempf, overwrite = T))
metadata <- utils::read.csv(tempf, stringsAsFactors=F)
}
geography=1111
metadata
# Select geo
if( geography %in% metadata$geo){
temp_meta <- subset(metadata, geo == geography) }
else { stop(paste0("Error: Invalid Value to argument 'geography'. It must be one of the following: ",
paste(unique(metadata$geo), collapse = " ")))
}
# Select geo
if( geography %in% metadata$geo){
temp_meta <- subset(metadata, geo == geography)
} else { stop(paste0("Error: Invalid Value to argument 'geography'. It must be one of the following: ",
paste(unique(metadata$geo), collapse = " ")))
}
if( geography %in% metadata$geo){
temp_meta <- subset(metadata, geo == geography)
} else { stop(paste0("Error: Invalid Value to argument 'geography'. It must be one of the following: ",
paste(unique(metadata$geo), collapse = ", ")))
}
download_metadata(geography = "aaa")
library(geobr)
2+2
download_metadata()
#' @export
#' @family general support functions
#' @examples \donttest{
#'
#' library(geobr)
#'
#' df <- download_metadata()
#'
#' }
#'
download_metadata <- function(geography=NULL, data_type=TRUE){
# Get metadata with data addresses
tempf <- file.path(tempdir(), "metadata.csv")
# check if metadata has already been downloaded
if (file.exists(tempf)) {
metadata <- utils::read.csv(tempf, stringsAsFactors=F)
} else {
# download it and save to metadata
httr::GET(url="http://www.ipea.gov.br/geobr/metadata/metadata_gpkg.csv", httr::write_disk(tempf, overwrite = T))
metadata <- utils::read.csv(tempf, stringsAsFactors=F)
}
# Select geo
if( is.null(geography) | !(geography %in% metadata$geo)){
stop(paste0("Error: Invalid Value to argument 'geography'. It must be one of the following: ",
paste(unique(metadata$geo), collapse = ", ")))
} else { temp_meta <- subset(metadata, geo == geography) }
# Select data type
temp_meta <- select_data_type(temp_meta, simplified=data_type)
return(temp_meta)
}
download_metadata()
#' @export
#' @family general support functions
#' @examples \donttest{
#'
#' library(geobr)
#'
#' df <- download_metadata()
#'
#' }
#'
download_metadata <- function(geography, data_type=TRUE){
# Get metadata with data addresses
tempf <- file.path(tempdir(), "metadata.csv")
# check if metadata has already been downloaded
if (file.exists(tempf)) {
metadata <- utils::read.csv(tempf, stringsAsFactors=F)
} else {
# download it and save to metadata
httr::GET(url="http://www.ipea.gov.br/geobr/metadata/metadata_gpkg.csv", httr::write_disk(tempf, overwrite = T))
metadata <- utils::read.csv(tempf, stringsAsFactors=F)
}
# Select geo
if( is.null(geography) | !(geography %in% metadata$geo)){
stop(paste0("Error: Invalid Value to argument 'geography'. It must be one of the following: ",
paste(unique(metadata$geo), collapse = ", ")))
} else { temp_meta <- subset(metadata, geo == geography) }
# Select data type
temp_meta <- select_data_type(temp_meta, simplified=data_type)
return(temp_meta)
}
download_metadata()
geography=NULL
data_type=TRUE
# Get metadata with data addresses
tempf <- file.path(tempdir(), "metadata.csv")
# check if metadata has already been downloaded
if (file.exists(tempf)) {
metadata <- utils::read.csv(tempf, stringsAsFactors=F)
} else {
# download it and save to metadata
httr::GET(url="http://www.ipea.gov.br/geobr/metadata/metadata_gpkg.csv", httr::write_disk(tempf, overwrite = T))
metadata <- utils::read.csv(tempf, stringsAsFactors=F)
}
# Select geo
if( is.null(geography) | !(geography %in% metadata$geo)){
stop(paste0("Error: Invalid Value to argument 'geography'. It must be one of the following: ",
paste(unique(metadata$geo), collapse = ", ")))
} else { temp_meta <- subset(metadata, geo == geography) }
geography
is.null(geography)
!(geography %in% metadata$geo)
geography %in% metadata$geo
metadata$geo
geography %in% metadata$geo
1 %in% c(1,3,4)
1 %in% c(3,4)
'c' %in% c('b','a')
'c' %in% c('b','a','c')
geography
#' @export
#' @family general support functions
#' @examples \donttest{
#'
#' library(geobr)
#'
#' df <- download_metadata()
#'
#' }
#'
download_metadata <- function(geography=NULL, data_type=TRUE){
# Get metadata with data addresses
tempf <- file.path(tempdir(), "metadata.csv")
# check if metadata has already been downloaded
if (file.exists(tempf)) {
metadata <- utils::read.csv(tempf, stringsAsFactors=F)
} else {
# download it and save to metadata
httr::GET(url="http://www.ipea.gov.br/geobr/metadata/metadata_gpkg.csv", httr::write_disk(tempf, overwrite = T))
metadata <- utils::read.csv(tempf, stringsAsFactors=F)
}
# Select geo
if( is.null(geography) ){
stop(paste0("Error: Invalid Value to argument 'geography'. It must be one of the following: ",
paste(unique(metadata$geo), collapse = ", ")))
} else if( !(geography %in% metadata$geo)){
stop(paste0("Error: Invalid Value to argument 'geography'. It must be one of the following: ",
paste(unique(metadata$geo), collapse = ", ")))
} else { temp_meta <- subset(metadata, geo == geography) }
# Select data type
temp_meta <- select_data_type(temp_meta, simplified=data_type)
return(temp_meta)
}
download_metadata()
download_metadata("as")
metadata <- download_metadata(geography = 'amazonia_legal')
testthat::expect_true(is(metadata, "data.frame"))
testthat::expect_equal(ncol(metadata), 5)
testthat::expect_error( download_metadata(data_type="asdasd") )
testthat::expect_error( download_metadata(geography = "aaa")  )
testthat::expect_error( download_metadata( )  )
2+2
library(covr)
library(testthat)
library(geobr)
Sys.setenv(NOT_CRAN = "true")
function_coverage(fun='download_metadata', test_file("tests/testthat/test-download_metadata.R"))
library(geobr)
test_that("download_metadata", {
metadata <- download_metadata(geography = 'amazonia_legal')
testthat::expect_true(is(metadata, "data.frame"))
testthat::expect_equal(ncol(metadata), 5)
})
# Expected errors
test_that("download_metadata", {
testthat::expect_error( download_metadata( )  )
testthat::expect_error( download_metadata(data_type="asdasd") )
testthat::expect_error( download_metadata(geography = "aaa")  )
})
function_coverage(fun=geobr::read_amazon, test_file("tests/testthat/test-read_amazon.R"))
library(geobro)
library(geobr)
a <- read_state()
b <- read_immediate_region()
head(b)
head(a)
urb_2005 <- b %>% st_sf() %>% st_zm( drop = T, what = "ZM")
library(magrittr)
urb_2005 <- b %>% st_sf() %>% st_zm( drop = T, what = "ZM")
library(sf)
urb_2005 <- b %>% st_sf() %>% st_zm( drop = T, what = "ZM")
urb_2005
head(a)
head(b)
head(urb_2005)
library(RCurl)
library(stringr)
library(sf)
library(janitor)
library(dplyr)
library(readr)
library(parallel)
library(data.table)
library(xlsx)
library(magrittr)
library(devtools)
library(lwgeom)
library(stringi)
library(RCurl)
library(stringr)
library(sf)
library(janitor)
library(dplyr)
library(readr)
library(parallel)
library(data.table)
library(xlsx)
library(magrittr)
library(devtools)
library(lwgeom)
library(stringi)
library(RCurl)
library(stringr)
library(sf)
library(janitor)
library(dplyr)
library(readr)
library(parallel)
library(data.table)
library(xlsx)
library(magrittr)
library(devtools)
library(lwgeom)
library(stringi)
source("./prep_data/prep_functions.R")

ifelse(code_state== 25, "Paraíba",
ifelse(code_state== 26, "Pernambuco",
ifelse(code_state== 27, "Alagoas",
ifelse(code_state== 28, "Sergipe",
ifelse(code_state== 29, "Bahia",
ifelse(code_state== 31, "Minas Gerais",
ifelse(code_state== 32, "Espírito Santo",
ifelse(code_state== 33, "Rio de Janeiro",
ifelse(code_state== 35, "São Paulo",
ifelse(code_state== 41, "Paraná",
ifelse(code_state== 42, "Santa Catarina",
ifelse(code_state== 43, "Rio Grande do Sul",
ifelse(code_state== 50, "Mato Grosso do Sul",
ifelse(code_state== 51, "Mato Grosso",
ifelse(code_state== 52, "Goiás",
ifelse(code_state== 53, "Distrito Federal",NA))))))))))))))))))))))))))),
# code_region
code_region = substr(code_immediate,1,1),
# name_region
name_region = ifelse(code_region==1, 'Norte',
ifelse(code_region==2, 'Nordeste',
ifelse(code_region==3, 'Sudeste',
ifelse(code_region==4, 'Sul',
ifelse(code_region==5, 'Centro Oeste', NA))))))
# reorder columns
temp_sf <- dplyr::select(temp_sf, 'code_immediate', 'name_immediate','code_state', 'abbrev_state',
'name_state', 'code_region', 'name_region', 'geometry')
sapply(temp_sf,class)
temp_sf <- temp_sf %>% mutate_if(is.factor, function(x){ x %>% as.character() } )
temp_sf <- temp_sf %>% mutate_if(is.character, function(x){ x %>% stringi::stri_encode("UTF-8") } )
head(temp_sf)
# read data
temp_sf <- st_read("RG2017_rgi.shp", quiet = F, stringsAsFactors=F, options = "ENCODING=UTF8")
temp_sf <- dplyr::rename(temp_sf, code_immediate = rgi, name_immediate = nome_rgi)
temp_sf <- temp_sf %>%
dplyr::mutate(year = 2017,
# code_state
code_state = substr(code_immediate,1,2),
# abbrev_state
abbrev_state =  ifelse(code_state== 11, "RO",
ifelse(code_state== 12, "AC",
ifelse(code_state== 13, "AM",
ifelse(code_state== 14, "RR",
ifelse(code_state== 15, "PA",
ifelse(code_state== 16, "AP",
ifelse(code_state== 17, "TO",
ifelse(code_state== 21, "MA",
ifelse(code_state== 22, "PI",
ifelse(code_state== 23, "CE",
ifelse(code_state== 24, "RN",
ifelse(code_state== 25, "PB",
ifelse(code_state== 26, "PE",
ifelse(code_state== 27, "AL",
ifelse(code_state== 28, "SE",
ifelse(code_state== 29, "BA",
ifelse(code_state== 31, "MG",
ifelse(code_state== 32, "ES",
ifelse(code_state== 33, "RJ",
ifelse(code_state== 35, "SP",
ifelse(code_state== 41, "PR",
ifelse(code_state== 42, "SC",
ifelse(code_state== 43, "RS",
ifelse(code_state== 50, "MS",
ifelse(code_state== 51, "MT",
ifelse(code_state== 52, "GO",
ifelse(code_state== 53, "DF",NA))))))))))))))))))))))))))),
# name_state
name_state =  ifelse(code_state== 11, "Rondônia",
ifelse(code_state== 12, "Acre",
ifelse(code_state== 13, "Amazônia",
ifelse(code_state== 14, "Roraima",
ifelse(code_state== 15, "Pará",
ifelse(code_state== 16, "Amapá",
ifelse(code_state== 17, "Tocantins",
ifelse(code_state== 21, "Maranhão",
ifelse(code_state== 22, "Piauí",
ifelse(code_state== 23, "Ceará",
ifelse(code_state== 24, "Rio Grande do Norte",
ifelse(code_state== 25, "Paraíba",
ifelse(code_state== 26, "Pernambuco",
ifelse(code_state== 27, "Alagoas",
ifelse(code_state== 28, "Sergipe",
ifelse(code_state== 29, "Bahia",
ifelse(code_state== 31, "Minas Gerais",
ifelse(code_state== 32, "Espírito Santo",
ifelse(code_state== 33, "Rio de Janeiro",
ifelse(code_state== 35, "São Paulo",
ifelse(code_state== 41, "Paraná",
ifelse(code_state== 42, "Santa Catarina",
ifelse(code_state== 43, "Rio Grande do Sul",
ifelse(code_state== 50, "Mato Grosso do Sul",
ifelse(code_state== 51, "Mato Grosso",
ifelse(code_state== 52, "Goiás",
ifelse(code_state== 53, "Distrito Federal",NA))))))))))))))))))))))))))),
# code_region
code_region = substr(code_immediate,1,1),
# name_region
name_region = ifelse(code_region==1, 'Norte',
ifelse(code_region==2, 'Nordeste',
ifelse(code_region==3, 'Sudeste',
ifelse(code_region==4, 'Sul',
ifelse(code_region==5, 'Centro Oeste', NA))))))
# reorder columns
temp_sf <- dplyr::select(temp_sf, 'code_immediate', 'name_immediate','code_state', 'abbrev_state',
'name_state', 'code_region', 'name_region', 'geometry')
# convert all factor columns to character
temp_sf4 <- temp_sf %>% mutate_if(is.factor, function(x){ x %>% as.character() } )
temp_sf4
temp_sf4 <- temp_sf4 %>% mutate_if(is.character, function(x){ x %>% stringi::stri_encode("UTF-8") } )
temp_sf4
# convert all factor columns to character
temp_sf4 <- temp_sf %>% mutate_if(is.factor, function(x){ x %>% as.character() } )
###### 2. rename column names -----------------
# read data
temp_sf <- st_read("RG2017_rgi.shp", quiet = F, stringsAsFactors=F, options = "ENCODING=UTF8")
temp_sf <- dplyr::rename(temp_sf, code_immediate = rgi, name_immediate = nome_rgi)
temp_sf <- temp_sf %>%
dplyr::mutate(year = 2017,
# code_state
code_state = substr(code_immediate,1,2),
# abbrev_state
abbrev_state =  ifelse(code_state== 11, "RO",
ifelse(code_state== 12, "AC",
ifelse(code_state== 13, "AM",
ifelse(code_state== 14, "RR",
ifelse(code_state== 15, "PA",
ifelse(code_state== 16, "AP",
ifelse(code_state== 17, "TO",
ifelse(code_state== 21, "MA",
ifelse(code_state== 22, "PI",
ifelse(code_state== 23, "CE",
ifelse(code_state== 24, "RN",
ifelse(code_state== 25, "PB",
ifelse(code_state== 26, "PE",
ifelse(code_state== 27, "AL",
ifelse(code_state== 28, "SE",
ifelse(code_state== 29, "BA",
ifelse(code_state== 31, "MG",
ifelse(code_state== 32, "ES",
ifelse(code_state== 33, "RJ",
ifelse(code_state== 35, "SP",
ifelse(code_state== 41, "PR",
ifelse(code_state== 42, "SC",
ifelse(code_state== 43, "RS",
ifelse(code_state== 50, "MS",
ifelse(code_state== 51, "MT",
ifelse(code_state== 52, "GO",
ifelse(code_state== 53, "DF",NA))))))))))))))))))))))))))),
# name_state
name_state =  ifelse(code_state== 11, "Rondônia",
ifelse(code_state== 12, "Acre",
ifelse(code_state== 13, "Amazônia",
ifelse(code_state== 14, "Roraima",
ifelse(code_state== 15, "Pará",
ifelse(code_state== 16, "Amapá",
ifelse(code_state== 17, "Tocantins",
ifelse(code_state== 21, "Maranhão",
ifelse(code_state== 22, "Piauí",
ifelse(code_state== 23, "Ceará",
ifelse(code_state== 24, "Rio Grande do Norte",
ifelse(code_state== 25, "Paraíba",
ifelse(code_state== 26, "Pernambuco",
ifelse(code_state== 27, "Alagoas",
ifelse(code_state== 28, "Sergipe",
ifelse(code_state== 29, "Bahia",
ifelse(code_state== 31, "Minas Gerais",
ifelse(code_state== 32, "Espírito Santo",
ifelse(code_state== 33, "Rio de Janeiro",
ifelse(code_state== 35, "São Paulo",
ifelse(code_state== 41, "Paraná",
ifelse(code_state== 42, "Santa Catarina",
ifelse(code_state== 43, "Rio Grande do Sul",
ifelse(code_state== 50, "Mato Grosso do Sul",
ifelse(code_state== 51, "Mato Grosso",
ifelse(code_state== 52, "Goiás",
ifelse(code_state== 53, "Distrito Federal",NA))))))))))))))))))))))))))),
# code_region
code_region = substr(code_immediate,1,1),
# name_region
name_region = ifelse(code_region==1, 'Norte',
ifelse(code_region==2, 'Nordeste',
ifelse(code_region==3, 'Sudeste',
ifelse(code_region==4, 'Sul',
ifelse(code_region==5, 'Centro Oeste', NA))))))
# reorder columns
temp_sf <- dplyr::select(temp_sf, 'code_immediate', 'name_immediate','code_state', 'abbrev_state',
'name_state', 'code_region', 'name_region', 'geometry')
sapply(temp_sf, class)
# convert all factor columns to character
temp_sf <- temp_sf %>% mutate_if(is.factor, function(x){ x %>% as.character() } )
sapply(temp_sf, class)
# Harmonize spatial projection CRS, using SIRGAS 2000 epsg (SRID): 4674
temp_sf <- harmonize_projection(temp_sf)
head(temp_sf)
###### 5. remove Z dimension of spatial data-----------------
temp_sf <- temp_sf %>% st_sf() %>% st_zm( drop = T, what = "ZM")
head(temp_sf)
# Make any invalid geometry valid # st_is_valid( sf)
temp_sf <- lwgeom::st_make_valid(temp_sf)
# simplify
temp_sf_simplified <- st_transform(temp_sf, crs=3857) %>% sf::st_simplify(preserveTopology = T, dTolerance = 100) %>% st_transform(crs=4674)
destdir_clean
destdir_clean <- "./shapes_in_sf_cleaned"
# Create folders to save clean sf.rds files
destdir_clean <- "./shapes_in_sf_cleaned"
dir.create( destdir_clean , showWarnings = FALSE)
destdir_clean
sf::st_write(temp_sf, path= paste0(destdir_clean, "/immediate_regions_", 2017, ".gpkg"))
paste0(destdir_clean, "/immediate_regions_", 2017, ".gpkg")
temp_sf
destdir_clean
sf::st_write(temp_sf, path= paste0(destdir_clean, "/immediate_regions_", 2017, ".gpkg") )
# save original and simplified datasets
sf::st_write(temp_sf, path= paste0(destdir_clean, "/immediate_regions_2017.gpkg") )
paste0(destdir_clean, "/immediate_regions_2017.gpkg")
# save original and simplified datasets
sf::st_write(temp_sf, paste0(destdir_clean, "/immediate_regions_2017.gpkg") )
sf::st_write(temp_sf_simplified, paste0(destdir_clean, "/immediate_regions_2017_simplified.gpkg") )
b <- read_intermediate_region()
head(b)
tracts <- read_census_tract(code_tract = 'all', year=2010, simplified = F)
head(tracts)
nei <- subset(tracs, !is.na(name_neighborhood))
# keep only observations with neighborhood info
nei <- subset(tracts, !is.na(name_neighborhood))
nei2 <- subset(tracts, !is.na(code_neighborhoo))
nei2 <- subset(tracts, !is.na(code_neighborhood))
unique(nei$code_muni) %>% length()
head(nei)
library(data.table)
library(dplyr)
library(data.table)
setDT(nei2)
nei2[1:20]
nei2 <- setDT(nei2)
nei2 <- nei2[1:20]
setDT(nei2)
nei2
st_as_sf(nei2)
nei2
nei2[, .(a = summarize(st_as_sf(geom))), by= name_mun]
nei2[, .(a = summarize(st_as_sf(geom))), by= name_muni]
temp <- nei2 %>% group_by(name_neighborhood) %>% summarize()
plot(temp)
# dissolve borders to get neighborhoods
temp <- nei %>% group_by(name_neighborhood) %>% summarize()
head(temp)
nei2[, .(a = st_union(st_as_sf(geom))), by= name_muni]
temp
plot(temp)
# dissolve borders to get neighborhoods
temp <- st_as_sf(nei2) %>% group_by(name_neighborhood) %>% summarize()
temp
plot(temp)
nei2
nei2 <- nei2[1:7]
# dissolve borders to get neighborhoods
temp <- st_as_sf(nei2) %>% group_by(name_neighborhood) %>% summarize()
plot(temp)
nei2
nei2 <- nei2[1:4]
# dissolve borders to get neighborhoods
temp <- st_as_sf(nei2) %>% group_by(name_neighborhood) %>% summarize()
plot(temp)
mapview(temp)
subset(tracts,name_mun =="Guajará-Mirim"))
subset(tracts, name_muni =="Guajará-Mirim"))
subset(tracts, name_muni =="Guajará-Mirim")
t <- subset(tracts, name_muni =="Guajará-Mirim")
n <- subset(nei, name_muni =="Guajará-Mirim")
t
View(n)
View(t)
# dissolve borders to get neighborhoods
temp <- st_as_sf(t) %>% group_by(name_neighborhood) %>% summarize()
# dissolve borders to get neighborhoods
temp <- t %>% group_by(name_neighborhood) %>% summarize()
temp
plot(temp)
# dissolve borders to get neighborhoods
temp <- n %>% group_by(name_neighborhood) %>% summarize()
plot(temp)
n
setDT(n)
n[, .(a = sum(code_state)), by= name_muni]
n[, .(a = st_union(geom)), by= name_muni]
n[, .(a = st_union(geom)), by= code_neighborhood]
a <- n[, .(geom = st_union(geom)), by= code_neighborhood]
st_sf(a)
st_sf(a) %>% plot()
st_crs(a)
st_crs(a) <- st_crs(n)
st_crs(n)
st_crs(tracts)
st_crs(a) <- st_crs(tracts)
st_crs(a) <- 4674
a <- st_as_sf(a)
st_crs(a) <- 4674
plot(a)
head(a)
plot(a)
plot(temp)
library(sfheaders)
head(n)
a <- n[, .(geom = st_union(geom)), by= .(code_muni, code_neighborhood)]
a <- st_as_sf(a)
st_crs(a) <- 4674
plot(a)
a
class(a)
a <- as.data.frame(a)
a
class(a)
plot(a)
a <- st_as_sf(a)
plot(a)
a <- st_sf(a)
plot(a)
# get all municipalities
all_muni <- unique(nei$code_muni)
all_muni
temp
n
n
# dissolve borders to get neighborhoods
temp <- n %>%
group_by(zone, code_muni, name_muni, name_neighborhood,
code_neighborhood, code_subdistrict, name_subdistrict,
code_district, name_district, code_state) %>% summarize()
n <- subset(nei, name_muni =="Guajará-Mirim")
n
# dissolve borders to get neighborhoods
temp <- n %>%
group_by(zone, code_muni, name_muni, name_neighborhood,
code_neighborhood, code_district, name_district, code_state) %>% summarize()
temp
plot(temp)
nei
n <- subset(nei, name_muni =="Alta Floresta D'oeste")
# dissolve borders to get neighborhoods
temp <- n %>%
group_by(zone, code_muni, name_muni, name_neighborhood,
code_neighborhood, code_district, name_district, code_state) %>% summarize()
temp
plot(temp)
n <- subset(nei, name_muni =="Rio de Janeiro")
# dissolve borders to get neighborhoods
temp <- n %>%
group_by(zone, code_muni, name_muni, name_neighborhood,
code_neighborhood, code_district, name_district, code_state) %>% summarize()
n <- subset(nei, name_muni =="Rio De Janeiro")
# dissolve borders to get neighborhoods
temp <- n %>%
group_by(zone, code_muni, name_muni, name_neighborhood,
code_neighborhood, code_district, name_district, code_state) %>% summarize()
plot(temp)
all_muni[1:4]
x <- lapply(X= all_muni[1:4], FUN = get_neibhd)
get_neibhd <- function(codemuni) {
# subset muni
n <- subset(nei, code_muni == codemuni)
# dissolve borders to get neighborhoods
temp <- n %>%
group_by(
zone,
code_muni,
name_muni,
name_neighborhood,
code_neighborhood,
code_district,
name_district,
code_state
) %>% summarize()
# return neighborhoods of muni
return(temp)
# setDT(n)
# a <- n[, .(geom = st_union(geom)), by= .(code_muni, code_neighborhood)]
# a <- st_as_sf(a)
# st_crs(a) <- 4674
#
# plot(a)
}
# get all municipalities
all_muni <- unique(nei$code_muni)
x <- lapply(X= all_muni[1:4], FUN = get_neibhd)
x <- lapply(X= all_muni[1:4], FUN = get_neibhd) %>% rbindlist()
x
class(x)
x <- lapply(X= all_muni[1:4], FUN = get_neibhd) %>% rbind_list()
x
head(x)
plot(x)
class(x)
x <- lapply(X= all_muni[1:4], FUN = get_neibhd) %>% rbind_all()
temp_list <- lapply(X= all_muni[1:4], FUN = get_neibhd)
temp_sf <- do.call('rbind', temp_list)
plot(temp_sf)
mapview(temp_sf)
a <- future.apply::future_lapply(X = all_muni[1:4], FUN=get_neibhd, future.packages=c('sf', 'dplyr'))
# in parellel
future::plan(future::multiprocess)
temp_list <- future.apply::future_lapply(X = all_muni[1:4], FUN=get_neibhd, future.packages=c('sf', 'dplyr'))
rm(temp_list)
library(pbapply)
rm(temp_list)
rm(temp_list)
temp_list <- future.apply::future_lapply(X = all_muni[1:14], FUN=get_neibhd, future.packages=c('sf', 'dplyr'))
# pile all cities up
temp_sf <- do.call('rbind', temp_list)
mapview(temp_sf)
lookup_muni('distrito federal')
lookup_muni('brasilial')
lookup_muni('brasilia')
library(covr)
library(testthat)
library(geobr)
Sys.setenv(NOT_CRAN = "true")
function_coverage(fun='download_metadata', test_file("tests/testthat/test-download_metadata.R"))
function_coverage(fun='list_geobr', test_file("tests/testthat/test-list_geobr.R"))
function_coverage(fun='lookup_muni', test_file("tests/testthat/test-lookup_muni.R"))
function_coverage(fun='grid_state_correspondence_table', test_file("tests/testthat/test-grid_state_correspondence_table.R"))
function_coverage(fun='read_biomes', test_file("tests/testthat/test-read_biomes.R"))
test_that("lookup_muni", {
# read data
test_sf <- lookup_muni(name_muni = "fortaleza")
test_sf2 <- lookup_muni(code_muni=2304400)
test_sf3 <- lookup_muni(name_muni="all")
test_sf4 <- lookup_muni(code_muni="all")
# check sf object
expect_true(is(test_sf, "data.frame"))
expect_true(is(test_sf2, "data.frame"))
expect_true(is(test_sf3, "data.frame"))
expect_true(is(test_sf4, "data.frame"))
# check number of cols
expect_equal( ncol(test_sf), 13)
# When using two arguments (supposed to give a warning)
expect_warning(lookup_muni(name_muni="fortaleza", code_muni=2304400))
expect_warning( lookup_muni(name_muni="arroz", code_muni=2304400) )
})
# ERRORS and messagens  -----------------------
test_that("lookup_muni", {
expect_error(lookup_muni())
expect_error(lookup_muni(name_muni="arroz", code_muni=123213))
# Wrong name
expect_error(lookup_muni(name_muni="arroz"))
# Wrong code
expect_error(lookup_muni(code_muni=99999999))
})
metadata <- download_metadata(geography = 'amazonia_legal')
testthat::expect_true(is(metadata, "data.frame"))
testthat::expect_equal(ncol(metadata), 5)
test_that("download_metadata", {
metadata <- download_metadata(geography = 'amazonia_legal')
testthat::expect_true(is(metadata, "data.frame"))
testthat::expect_equal(ncol(metadata), 5)
})
# Expected errors
test_that("download_metadata", {
testthat::expect_error( download_metadata( )  )
testthat::expect_error( download_metadata(data_type="asdasd") )
testthat::expect_error( download_metadata(geography = "aaa")  )
})
download_metadata( )
library(geobr)
library(covr)
library(testthat)
library(geobr)
Sys.setenv(NOT_CRAN = "true")
function_coverage(fun='download_metadata', test_file("tests/testthat/test-download_metadata.R"))
download_metadata( )
download_metadata(data_type="asdasd")
download_metadata(geography = "aaa")
testthat::expect_error( download_metadata(data_type= 2) )
function_coverage(fun='download_metadata', test_file("tests/testthat/test-download_metadata.R"))
function_coverage(fun='download_metadata', test_file("tests/testthat/test-download_metadata.R"))
httr::GET(url="http://www.ipea.gov.br/geobr/metadata/metadata_gpkgss.csv", httr::write_disk(tempf, overwrite = T))
utils::read.csv(tempf, stringsAsFactors=F)
#' @export
#' @family general support functions
#' @examples \donttest{
#'
#' library(geobr)
#'
#' df <- download_metadata()
#'
#' }
#'
download_metadata <- function(geography, data_type=TRUE){
# Get metadata with data addresses
tempf <- file.path(tempdir(), "metadata.csv")
# check if metadata has already been downloaded
if (file.exists(tempf)) {
metadata <- utils::read.csv(tempf, stringsAsFactors=F)
} else {
# download it and save to metadata
httr::GET(url="http://www.ipea.gov.br/geobr/metadata/metadata_gpkgs.csv", httr::write_disk(tempf, overwrite = T))
metadata <- utils::read.csv(tempf, stringsAsFactors=F)
}
# Select geo
if( is.null(geography) ){
stop(paste0("Error: Invalid Value to argument 'geography'. It must be one of the following: ",
paste(unique(metadata$geo), collapse = ", ")))
} else if( !(geography %in% metadata$geo)){
stop(paste0("Error: Invalid Value to argument 'geography'. It must be one of the following: ",
paste(unique(metadata$geo), collapse = ", ")))
} else { temp_meta <- subset(metadata, geo == geography) }
# Select data type
temp_meta <- select_data_type(temp_meta, simplified=data_type)
return(temp_meta)
}
download_metadata( )
download_metadata(geography = 'amazonia_legal')

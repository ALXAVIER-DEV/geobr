temps <- paste0(tempdir(),"/", unlist(lapply(strsplit(filesD,"/"),tail,n=1L)))
httr::GET(url=filesD, httr::progress(), httr::write_disk(temps, overwrite = T))
httr::GET(url=filesD, httr::progress(type="down"), httr::write_disk(temps, overwrite = T))
httr::GET(url=filesD, httr::progress(type="up"), httr::write_disk(temps, overwrite = T))
httr::GET(url=filesD, httr::progress(type="up"), httr::write_disk(temps, overwrite = T))
httr::GET(url=filesD, httr::progress(type="down"), httr::write_disk(temps, overwrite = T))
#' Download geopackage to tempdir
#'
#'
#' @param filesD A string with the url address of a geobr dataset
#' @export
#' @family support functions
#'
download_gpkg2 <- function(filesD){ # showProgress = TRUE # TRUE displays progress bar
# in one single files
if(length(filesD)==1){
# download files
temps <- paste0(tempdir(),"/", unlist(lapply(strsplit(filesD,"/"),tail,n=1L)))
httr::GET(url=filesD, httr::progress(), httr::write_disk(temps, overwrite = T))
return(temps)
}
# if a list of files
if(length(filesD)>1) {
# input for progress bar
total <- length(filesD)
pb <- utils::txtProgressBar(min = 0, max = total, style = 3)
# download files
lapply(X=filesD, function(x){
i <- match(c(x),filesD)
httr::GET(url=x, #httr::progress(),
httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T))
utils::setTxtProgressBar(pb, i)
}
)
# closing progress bar
close(pb)}
}
# Get metadata with data addresses
metadata <- download_metadata()
# Select geo
temp_meta <- subset(metadata, geo=="state")
# Select data type
temp_meta <- select_data_type(temp_meta, tp)
# Verify year input
if (is.null(year)){ message("Using data from year 2010\n")
year <- 2010
temp_meta <- subset(temp_meta, year==2010)
} else if (year %in% temp_meta$year){ temp_meta <- temp_meta[temp_meta[,2] == year, ]
} else { stop(paste0("Error: Invalid Value to argument 'year'. It must be one of the following: ",
paste(unique(temp_meta$year),collapse = " ")))
}
filesD <- as.character(temp_meta$download_path)
filesD
shape
# # download files
# lapply(X=filesD, function(x){
#   i <- match(c(x),filesD)
#   httr::GET(url=x, #httr::progress(),
#             httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T))
#   utils::setTxtProgressBar(pb, i)
# }
# )
# # closing progress bar
# close(pb)
a <-  download_gpkg2()
download_gpkg2(filesD)
files <- unlist(lapply(strsplit(filesD,"/"), tail, n = 1L))
files <- paste0(tempdir(),"/",files)
files <- lapply(X=files, FUN= sf::st_read, quiet=T)
shape <- do.call('rbind', files)
shape
# # download files
# lapply(X=filesD, function(x){
#   i <- match(c(x),filesD)
#   httr::GET(url=x, #httr::progress(),
#             httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T))
#   utils::setTxtProgressBar(pb, i)
# }
# )
# # closing progress bar
# close(pb)
a <-  download_gpkg2(filesD)
#' Download geopackage to tempdir
#'
#'
#' @param filesD A string with the url address of a geobr dataset
#' @param showProgress Logical. Defaults to TRUE and displays progress bar
#' @export
#' @family support functions
#'
download_gpkg2 <- function(filesD, showProgress = TRUE){
# in one single files
if(length(filesD)==1 & showProgress = TRUE){
# download files
temps <- paste0(tempdir(),"/", unlist(lapply(strsplit(filesD,"/"),tail,n=1L)))
httr::GET(url=filesD, httr::progress(), httr::write_disk(temps, overwrite = T))
return(temps)
} else if(length(filesD)==1 & showProgress = FALSE){
# download files
temps <- paste0(tempdir(),"/", unlist(lapply(strsplit(filesD,"/"),tail,n=1L)))
httr::GET(url=filesD, httr::write_disk(temps, overwrite = T))
return(temps)
} else if(length(filesD) > 1) {
# input for progress bar
total <- length(filesD)
pb <- utils::txtProgressBar(min = 0, max = total, style = 3)
# download files
lapply(X=filesD, function(x){
i <- match(c(x),filesD)
httr::GET(url=x, #httr::progress(),
httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T))
utils::setTxtProgressBar(pb, i)
}
)
# closing progress bar
close(pb)}
}
if(length(filesD)==1 & showProgress = TRUE){
# download files
temps <- paste0(tempdir(),"/", unlist(lapply(strsplit(filesD,"/"),tail,n=1L)))
httr::GET(url=filesD, httr::progress(), httr::write_disk(temps, overwrite = T))
return(temps)
}
if(length(filesD)==1 & showProgress = TRUE){
# download files
temps <- paste0(tempdir(),"/", unlist(lapply(strsplit(filesD,"/"),tail,n=1L)))
httr::GET(url=filesD, httr::progress(), httr::write_disk(temps, overwrite = T))
return(temps)
}
if(length(filesD)==1 & showProgress = TRUE){
# download files
temps <- paste0(tempdir(),"/", unlist(lapply(strsplit(filesD,"/"),tail,n=1L)))
httr::GET(url=filesD, httr::progress(), httr::write_disk(temps, overwrite = T))
return(temps)
}
(length(filesD)==1 & showProgress = TRUE)
length(filesD)
length(filesD)==1
if(length(filesD)==1 & showProgress == TRUE){
# download files
temps <- paste0(tempdir(),"/", unlist(lapply(strsplit(filesD,"/"),tail,n=1L)))
httr::GET(url=filesD, httr::progress(), httr::write_disk(temps, overwrite = T))
return(temps)
}
showProgress = TRUE
if(length(filesD) > 1 & showProgress == FALSE) {
# download files
lapply(X=filesD, function(x){
i <- match(c(x),filesD)
httr::GET(url=x, #httr::progress(),
httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T))})
}
showProgress
showProgress=F
if(length(filesD) > 1 & showProgress == FALSE) {
# download files
lapply(X=filesD, function(x){
i <- match(c(x),filesD)
httr::GET(url=x, #httr::progress(),
httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T))})
}
#' Download geopackage to tempdir
#'
#'
#' @param filesD A string with the url address of a geobr dataset
#' @param showProgress Logical. Defaults to TRUE and displays progress bar
#' @export
#' @family support functions
#'
download_gpkg2 <- function(filesD, showProgress = TRUE){
# in one single files
if(length(filesD)==1 & showProgress == TRUE){
# download files
temps <- paste0(tempdir(),"/", unlist(lapply(strsplit(filesD,"/"),tail,n=1L)))
httr::GET(url=filesD, httr::progress(), httr::write_disk(temps, overwrite = T))
return(temps)
}
else if(length(filesD)==1 & showProgress == FALSE){
# download files
temps <- paste0(tempdir(),"/", unlist(lapply(strsplit(filesD,"/"),tail,n=1L)))
httr::GET(url=filesD, httr::write_disk(temps, overwrite = T))
return(temps)
}
else if(length(filesD) > 1 & showProgress == TRUE) {
# input for progress bar
total <- length(filesD)
pb <- utils::txtProgressBar(min = 0, max = total, style = 3)
# download files
lapply(X=filesD, function(x){
i <- match(c(x),filesD)
httr::GET(url=x, #httr::progress(),
httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T))
utils::setTxtProgressBar(pb, i)})
# closing progress bar
close(pb)}
else if(length(filesD) > 1 & showProgress == FALSE) {
# download files
lapply(X=filesD, function(x){
i <- match(c(x),filesD)
httr::GET(url=x, #httr::progress(),
httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T))})
}
}
#' Download geopackage to tempdir
#'
#'
#' @param filesD A string with the url address of a geobr dataset
#' @param showProgress Logical. Defaults to TRUE and displays progress bar
#' @export
#' @family support functions
#'
download_gpkg2 <- function(filesD, showProgress = TRUE){
# in one single files
if(length(filesD)==1 & showProgress == TRUE){
# download files
temps <- paste0(tempdir(),"/", unlist(lapply(strsplit(filesD,"/"),tail,n=1L)))
httr::GET(url=filesD, httr::progress(), httr::write_disk(temps, overwrite = T))
return(temps)
}
else if(length(filesD)==1 & showProgress == FALSE){
# download files
temps <- paste0(tempdir(),"/", unlist(lapply(strsplit(filesD,"/"),tail,n=1L)))
httr::GET(url=filesD, httr::write_disk(temps, overwrite = T))
return(temps)
}
else if(length(filesD) > 1 & showProgress == TRUE) {
# input for progress bar
total <- length(filesD)
pb <- utils::txtProgressBar(min = 0, max = total, style = 3)
# download files
lapply(X=filesD, function(x){
i <- match(c(x),filesD)
httr::GET(url=x, #httr::progress(),
httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T))
utils::setTxtProgressBar(pb, i)})
# closing progress bar
close(pb)}
else if(length(filesD) > 1 & showProgress == FALSE) {
# download files
lapply(X=filesD, function(x){
i <- match(c(x),filesD)
httr::GET(url=x, #httr::progress(),
httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T))})
}
}
showProgress=TRUE
tp
year
code_state
#' Download geopackage to tempdir
#'
#'
#' @param filesD A string with the url address of a geobr dataset
#' @param progress_bar Logical. Defaults to (TRUE) display progress bar
#' @export
#' @family support functions
#'
download_gpkg2 <- function(filesD, progress_bar = showProgress){
# in one single files
if(length(filesD)==1 & progress_bar == TRUE){
# download files
temps <- paste0(tempdir(),"/", unlist(lapply(strsplit(filesD,"/"),tail,n=1L)))
httr::GET(url=filesD, httr::progress(), httr::write_disk(temps, overwrite = T))
return(temps)
}
else if(length(filesD)==1 & progress_bar == FALSE){
# download files
temps <- paste0(tempdir(),"/", unlist(lapply(strsplit(filesD,"/"),tail,n=1L)))
httr::GET(url=filesD, httr::write_disk(temps, overwrite = T))
return(temps)
}
else if(length(filesD) > 1 & progress_bar == TRUE) {
# input for progress bar
total <- length(filesD)
pb <- utils::txtProgressBar(min = 0, max = total, style = 3)
# download files
lapply(X=filesD, function(x){
i <- match(c(x),filesD)
httr::GET(url=x, #httr::progress(),
httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T))
utils::setTxtProgressBar(pb, i)})
# closing progress bar
close(pb)}
else if(length(filesD) > 1 & progress_bar == FALSE) {
# download files
lapply(X=filesD, function(x){
i <- match(c(x),filesD)
httr::GET(url=x, #httr::progress(),
httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T))})
}
}
temps <- download_gpkg2(filesD, progress_bar = showProgress)
filesD
temps
read_state <- function(code_state="all", year=NULL, tp="simplified", showProgress=TRUE){
# Get metadata with data addresses
metadata <- download_metadata()
# Select geo
temp_meta <- subset(metadata, geo=="state")
# Select data type
temp_meta <- select_data_type(temp_meta, tp)
# Verify year input
if (is.null(year)){ message("Using data from year 2010\n")
year <- 2010
temp_meta <- subset(temp_meta, year==2010)
} else if (year %in% temp_meta$year){ temp_meta <- temp_meta[temp_meta[,2] == year, ]
} else { stop(paste0("Error: Invalid Value to argument 'year'. It must be one of the following: ",
paste(unique(temp_meta$year),collapse = " ")))
}
# BLOCK 2.1 From 1872 to 1991  ----------------------------
x <- year
if( x < 1992){
#   if( !(substr(x = code_state, 1, 2) %in% temp_meta$code) &
#       !(substr(x = code_state, 1, 2) %in% temp_meta$code_abrev) &
#       !(substr(x = code_state, 1, 3) %in% "all")) {
#       stop("Error: Invalid Value to argument code_state.")
#       }
if(is.null(code_state)){ stop("Value to argument 'code_state' cannot be NULL") }
message("Loading data for the whole country\n")
# list paths of files to download
filesD <- as.character(temp_meta$download_path)
# download files
temps <- download_gpkg2(filesD, progress_bar = showProgress)
# read sf
temp_sf <- sf::st_read(temps, quiet=T)
return(temp_sf)
} else {
# BLOCK 2.2 From 2000 onwards  ----------------------------
# Verify code_state input
# if code_state=="all", read the entire country
if(code_state=="all"){ message("Loading data for the whole country\n")
# list paths of files to download
filesD <- as.character(temp_meta$download_path)
# # input for progress bar
# total <- length(filesD)
# pb <- utils::txtProgressBar(min = 0, max = total, style = 3)
#
# # download files
# lapply(X=filesD, function(x){
#   i <- match(c(x),filesD)
#   httr::GET(url=x, #httr::progress(),
#             httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T))
#   utils::setTxtProgressBar(pb, i)
# }
# )
# # closing progress bar
# close(pb)
download_gpkg2(filesD, progress_bar = showProgress)
# read files and pile them up
files <- unlist(lapply(strsplit(filesD,"/"), tail, n = 1L))
files <- paste0(tempdir(),"/",files)
files <- lapply(X=files, FUN= sf::st_read, quiet=T)
shape <- do.call('rbind', files)
return(shape)
}
if( !(substr(x = code_state, 1, 2) %in% temp_meta$code) & !(substr(x = code_state, 1, 2) %in% temp_meta$code_abrev)){
stop("Error: Invalid Value to argument code_state.")
} else{
# list paths of files to download
if (is.numeric(code_state)){ filesD <- as.character(subset(temp_meta, code==substr(code_state, 1, 2))$download_path) }
if (is.character(code_state)){ filesD <- as.character(subset(temp_meta, code_abrev==substr(code_state, 1, 2))$download_path) }
# download files
temps <- download_gpkg2(filesD, progress_bar = showProgress)
# read sf
shape <- sf::st_read(temps, quiet=T)
if(nchar(code_state)==2){
return(shape)
# } else if(code_state %in% shape$code_state){
#   x <- code_state
#   shape <- subset(shape, code_state==x)
#   return(shape)
} else{
stop("Error: Invalid Value to argument code_state.")
}
}
}}
read_state(code_state=12, year=2017)
read_state(code_state="SC", year=2000)
read_state(code_state="all", year=2010)
read_state(code_state="all", year=2010, showProgress=F)
uf <- read_state(code_state="SC", year=2000, showProgress=F)
uf <- read_state(code_state=12, year=2017, showProgress=F)
#' Load geopackage from tempdir to global environment
#'
#'
#' @param filesD A string with the url address of a geobr dataset
#' @param temps The address of a gpkg file stored in tempdir. Defaults to NULL
#' @export
#' @family support functions
#'
load_gpkg <- function(filesD, temps=NULL){
### one single file
if(length(filesD)==1){
# read sf
shape <- sf::st_read(temps, quiet=T)
return(shape)
}
else if(length(filesD) > 1){
# read files and pile them up
files <- unlist(lapply(strsplit(filesD,"/"), tail, n = 1L))
files <- paste0(tempdir(),"/",files)
files <- lapply(X=files, FUN= sf::st_read, quiet=T)
shape <- do.call('rbind', files)
return(shape)
}
}
download_gpkg(filesD, progress_bar = showProgress)
#' Download geopackage to tempdir
#'
#'
#' @param filesD A string with the url address of a geobr dataset
#' @param progress_bar Logical. Defaults to (TRUE) display progress bar
#' @export
#' @family support functions
#'
download_gpkg <- function(filesD, progress_bar = showProgress){
### one single file
if(length(filesD)==1 & progress_bar == TRUE){
# download file
temps <- paste0(tempdir(),"/", unlist(lapply(strsplit(filesD,"/"),tail,n=1L)))
httr::GET(url=filesD, httr::progress(), httr::write_disk(temps, overwrite = T))
return(temps)
}
else if(length(filesD)==1 & progress_bar == FALSE){
# download file
temps <- paste0(tempdir(),"/", unlist(lapply(strsplit(filesD,"/"),tail,n=1L)))
httr::GET(url=filesD, httr::write_disk(temps, overwrite = T))
return(temps)
}
### multiple files
else if(length(filesD) > 1 & progress_bar == TRUE) {
# input for progress bar
total <- length(filesD)
pb <- utils::txtProgressBar(min = 0, max = total, style = 3)
# download files
lapply(X=filesD, function(x){
i <- match(c(x),filesD)
httr::GET(url=x, #httr::progress(),
httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T))
utils::setTxtProgressBar(pb, i)})
# closing progress bar
close(pb)}
else if(length(filesD) > 1 & progress_bar == FALSE) {
# download files
lapply(X=filesD, function(x){
i <- match(c(x),filesD)
httr::GET(url=x, #httr::progress(),
httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T))})
}
}
#' Load geopackage from tempdir to global environment
#'
#'
#' @param filesD A string with the url address of a geobr dataset
#' @param temps The address of a gpkg file stored in tempdir. Defaults to NULL
#' @export
#' @family support functions
#'
load_gpkg <- function(filesD, temps=NULL){
### one single file
if(length(filesD)==1){
# read sf
shape <- sf::st_read(temps, quiet=T)
return(shape)
}
else if(length(filesD) > 1){
# read files and pile them up
files <- unlist(lapply(strsplit(filesD,"/"), tail, n = 1L))
files <- paste0(tempdir(),"/",files)
files <- lapply(X=files, FUN= sf::st_read, quiet=T)
shape <- do.call('rbind', files)
return(shape)
}
}
code_state="all"
year=NULL
tp="simplified"
showProgress=TRUE
# Get metadata with data addresses
metadata <- download_metadata()
# Select geo
temp_meta <- subset(metadata, geo=="state")
# Select data type
temp_meta <- select_data_type(temp_meta, tp)
# Verify year input
if (is.null(year)){ message("Using data from year 2010\n")
year <- 2010
temp_meta <- subset(temp_meta, year==2010)
} else if (year %in% temp_meta$year){ temp_meta <- temp_meta[temp_meta[,2] == year, ]
} else { stop(paste0("Error: Invalid Value to argument 'year'. It must be one of the following: ",
paste(unique(temp_meta$year),collapse = " ")))
}
# list paths of files to download
filesD <- as.character(temp_meta$download_path)
# # download files
# lapply(X=filesD, function(x){
#   i <- match(c(x),filesD)
#   httr::GET(url=x, #httr::progress(),
#             httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T))
#   utils::setTxtProgressBar(pb, i)
# }
# )
# # closing progress bar
# close(pb)
download_gpkg(filesD, progress_bar = showProgress)
a <- load_gpkg(filesD)
a
filesD=filesD[2]
filesD
temps <- download_gpkg(filesD, progress_bar = showProgress)
temps
load_gpkg(filesD, temps)

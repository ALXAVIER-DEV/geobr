test_sf <- read_semiarid(year=2017)
# check sf object
expect_true(is(test_sf0, "sf"))
expect_true(is(test_sf, "sf"))
# check number of micro
expect_equal(test_sf %>% length(), 5)
# check projection
expect_equal(sf::st_crs(test_sf)[[2]], "+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs")
})
test_that("read_semiarid", {
# read data
test_sf0 <- read_semiarid()
test_sf <- read_semiarid(year=2017)
# check sf object
expect_true(is(test_sf0, "sf"))
expect_true(is(test_sf, "sf"))
# check number of micro
expect_equal(test_sf %>% length(), 5)
# check projection
expect_equal(sf::st_crs(test_sf)[[2]], "+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs")
})
# Get metadata with data addresses
temp_meta <- download_metadata(geography="semiarid", data_type=tp)
tp="simplified"
showProgress=TRUE
year=2017
# Get metadata with data addresses
temp_meta <- download_metadata(geography="semiarid", data_type=tp)
# Test year input
temp_meta <- test_year_input(temp_meta, y=year)
file_url <- as.character(subset(temp_meta, year==x)$download_path)
temp_meta
year
temp_meta <- test_year_input(temp_meta, y=year)
# Test year input
temp_meta <- test_year_input(temp_meta, y=year)
file_url <- as.character(subset(temp_meta, year==x)$download_path)
#list paths of files to download
file_url <- as.character(temp_meta$download_path)
file_url
#list paths of files to download
file_url <- as.character(temp_meta$download_path)
# download files
temp_sf <- download_gpkg(file_url, progress_bar = showProgress)
# update Package coverage
Sys.setenv(NOT_CRAN = "true")
system.time(  geobr_cov <- covr::package_coverage() )
geobr_cov
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
expect_error(read_weighting_area(code_weighting=9999999, year=9999999))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
expect_equal(test_abrev$code_weighting %>% length(), 8)
# read data
test_code <- read_weighting_area(code_weighting=5201108005004, year=2010)
# check number of weighting areas
expect_equal(test_code$code_weighting %>% length(), 8)
test_code$code_weighting %>% length()
nrow(test_code)
head(test_code)
# check number of weighting areas
expect_equal(nrow(test_code), 68)
# check projection
expect_equal(sf::st_crs(test_code)[[2]], "+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs")
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
read_weighting_area()
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
test0 <- read_weighting_area()
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
expect_error(read_weighting_area(code_weighting=5201108312313213))
code_weighting=5201108312313213
code_weighting=5201108312313213
year=2010
tp="simplified"
showProgress=TRUE
# Get metadata with data addresses
temp_meta <- download_metadata(geography="weighting_area", data_type=tp)
# Test year input
temp_meta <- test_year_input(temp_meta, y=year)
# if code_weighting=="all", read the entire country
if(code_weighting=="all"){ message("Loading data for the whole country. This might take a few minutes.\n")
# list paths of files to download
file_url <- as.character(temp_meta$download_path)
# download files
temp_sf <- download_gpkg(file_url, progress_bar = showProgress)
return(temp_sf)
}
if( !(substr(x = code_weighting, 1, 2) %in% temp_meta$code) & !(substr(x = code_weighting, 1, 2) %in% temp_meta$code_abrev)){
stop("Error: Invalid Value to argument code_weighting.")
code_weighting=5201108312313213
if (is.numeric(code_weighting)){ file_url <- as.character(subset(temp_meta, code==substr(code_weighting, 1, 2))$download_path) }
if (is.character(code_weighting)){ file_url <- as.character(subset(temp_meta, code_abrev==substr(code_weighting, 1, 2))$download_path) }
file_url
#'   plot(w)
#'
#' # Read all weighting areas of the country at a given year
#'   w <- read_weighting_area(code_weighting="all", year=2010)
#'
#' }
#'
#'
#'
#'
read_weighting_area <- function(code_weighting="all", year=2010, tp="simplified", showProgress=TRUE){
# Get metadata with data addresses
temp_meta <- download_metadata(geography="weighting_area", data_type=tp)
# Test year input
temp_meta <- test_year_input(temp_meta, y=year)
# Verify code_weighting input
# if code_weighting=="all", read the entire country
if(code_weighting=="all"){ message("Loading data for the whole country. This might take a few minutes.\n")
# list paths of files to download
file_url <- as.character(temp_meta$download_path)
# download files
temp_sf <- download_gpkg(file_url, progress_bar = showProgress)
return(temp_sf)
}
else if( !(substr(x = code_weighting, 1, 2) %in% temp_meta$code) & !(substr(x = code_weighting, 1, 2) %in% temp_meta$code_abrev)){
stop("Error: Invalid Value to argument code_weighting.")
}else{
# list paths of files to download
if (is.numeric(code_weighting)){ file_url <- as.character(subset(temp_meta, code==substr(code_weighting, 1, 2))$download_path) }
if (is.character(code_weighting)){ file_url <- as.character(subset(temp_meta, code_abrev==substr(code_weighting, 1, 2))$download_path) }
# download files
temp_sf <- download_gpkg(file_url, progress_bar = showProgress)
# return whole state
if(nchar(code_weighting)==2){
return(temp_sf)
# return municipality
} else if(code_weighting %in% temp_sf$code_muni){    # Get weighting area
x <- code_weighting
temp_sf <- subset(temp_sf, code_muni==x)
return(temp_sf)
# return code weighting area
} else if(code_weighting %in% temp_sf$code_weighting_area){    # Get weighting area
x <- code_weighting
temp_sf <- subset(temp_sf, code_weighting_area==x)
return(temp_sf)
} else{
stop("Error: Invalid Value to argument code_weighting.")
}
}
}
expect_error(read_weighting_area(code_weighting=5201108312313213))
read_weighting_area(code_weighting=5201108312313213)
expect_error(read_weighting_area(code_weighting=5201108312313213))
read_weighting_area(code_weighting=5201108312313213)
a <- read_weighting_area(code_weighting=5201108312313213)
# Get metadata with data addresses
temp_meta <- download_metadata(geography="weighting_area", data_type=tp)
# Test year input
temp_meta <- test_year_input(temp_meta, y=year)
# if code_weighting=="all", read the entire country
if(code_weighting=="all"){ message("Loading data for the whole country. This might take a few minutes.\n")
# list paths of files to download
file_url <- as.character(temp_meta$download_path)
# download files
temp_sf <- download_gpkg(file_url, progress_bar = showProgress)
return(temp_sf)
}
else if( !(substr(x = code_weighting, 1, 2) %in% temp_meta$code) & !(substr(x = code_weighting, 1, 2) %in% temp_meta$code_abrev)){
stop("Error: Invalid Value to argument code_weighting.")
}else{
# list paths of files to download
if (is.numeric(code_weighting)){ file_url <- as.character(subset(temp_meta, code==substr(code_weighting, 1, 2))$download_path) }
if (is.character(code_weighting)){ file_url <- as.character(subset(temp_meta, code_abrev==substr(code_weighting, 1, 2))$download_path) }
# download files
temp_sf <- download_gpkg(file_url, progress_bar = showProgress)
# return whole state
if(nchar(code_weighting)==2){
return(temp_sf)
# return municipality
} else if(code_weighting %in% temp_sf$code_muni){    # Get weighting area
x <- code_weighting
temp_sf <- subset(temp_sf, code_muni==x)
return(temp_sf)
# return code weighting area
} else if(code_weighting %in% temp_sf$code_weighting_area){    # Get weighting area
x <- code_weighting
temp_sf <- subset(temp_sf, code_weighting_area==x)
return(temp_sf)
} else{
stop("Error: Invalid Value to argument code_weighting.")
}
}
# if code_weighting=="all", read the entire country
if(code_weighting=="all"){ message("Loading data for the whole country. This might take a few minutes.\n")
# list paths of files to download
file_url <- as.character(temp_meta$download_path)
# download files
temp_sf <- download_gpkg(file_url, progress_bar = showProgress)
return(temp_sf)
}
else if( !(substr(x = code_weighting, 1, 2) %in% temp_meta$code) & !(substr(x = code_weighting, 1, 2) %in% temp_meta$code_abrev)){
stop("Error: Invalid Value to argument code_weighting.")
}else{
# list paths of files to download
if (is.numeric(code_weighting)){ file_url <- as.character(subset(temp_meta, code==substr(code_weighting, 1, 2))$download_path) }
if (is.character(code_weighting)){ file_url <- as.character(subset(temp_meta, code_abrev==substr(code_weighting, 1, 2))$download_path) }
# download files
temp_sf <- download_gpkg(file_url, progress_bar = showProgress)
# return whole state
if(nchar(code_weighting)==2){
return(temp_sf)
# return municipality
} else if(code_weighting %in% temp_sf$code_muni){    # Get weighting area
x <- code_weighting
temp_sf <- subset(temp_sf, code_muni==x)
return(temp_sf)
# return code weighting area
} else if(code_weighting %in% temp_sf$code_weighting_area){    # Get weighting area
x <- code_weighting
temp_sf <- subset(temp_sf, code_weighting_area==x)
return(temp_sf)
} else{
stop("Error: Invalid Value to argument code_weighting.")
}
# if code_weighting=="all", read the entire country
if(code_weighting=="all"){ message("Loading data for the whole country. This might take a few minutes.\n")
# list paths of files to download
file_url <- as.character(temp_meta$download_path)
# download files
temp_sf <- download_gpkg(file_url, progress_bar = showProgress)
return(temp_sf)
}
# if code_weighting=="all", read the entire country
if(code_weighting=="all"){ message("Loading data for the whole country. This might take a few minutes.\n")
# list paths of files to download
file_url <- as.character(temp_meta$download_path)
# download files
temp_sf <- download_gpkg(file_url, progress_bar = showProgress)
return(temp_sf)
}
if( !(substr(x = code_weighting, 1, 2) %in% temp_meta$code) & !(substr(x = code_weighting, 1, 2) %in% temp_meta$code_abrev)){
stop("Error: Invalid Value to argument code_weighting.")
}
rm(file_url)
subset(temp_meta, code==substr(code_weighting, 1, 2))
# list paths of files to download
if (is.numeric(code_weighting)){ file_url <- as.character(subset(temp_meta, code==substr(code_weighting, 1, 2))$download_path) }
if (is.character(code_weighting)){ file_url <- as.character(subset(temp_meta, code_abrev==substr(code_weighting, 1, 2))$download_path) }
# download files
temp_sf <- download_gpkg(file_url, progress_bar = showProgress)
temp_sf
if(nchar(code_weighting)==2){
return(temp_sf)
# return municipality
}
code_weighting %in% temp_sf$code_muni
expect_error(read_weighting_area(code_weighting=5201108312313213))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
2+6
2+2
gc()
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
library(covr)
library(testthat)
library(geobr)
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
test_that("read_weighting_area", {
# read data
# test0 <- read_weighting_area()
test_code <- read_weighting_area(code_weighting=5201108005004, year=2010)
test_muni <- read_weighting_area(code_weighting=5201108, year=2010)
test_abrev <- read_weighting_area(code_weighting="AC", year=2010)
test_state <- read_weighting_area(code_weighting=11, year=2010)
test_all <- read_weighting_area(code_weighting="all", year=2010)
# check sf object
# expect_true(is(test0, "sf"))
expect_true(is(test_code, "sf"))
expect_true(is(test_muni, "sf"))
expect_true(is(test_abrev, "sf"))
expect_true(is(test_state, "sf"))
expect_true(is(test_all, "sf"))
# check number of weighting areas
expect_equal(nrow(test_code), 68)
# check projection
expect_equal(sf::st_crs(test_code)[[2]], "+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs")
})
# test0 <- read_weighting_area()
test_code <- read_weighting_area(code_weighting=5201108005004, year=2010)
test_muni <- read_weighting_area(code_weighting=5201108, year=2010)
test_abrev <- read_weighting_area(code_weighting="AC", year=2010)
test_state <- read_weighting_area(code_weighting=11, year=2010)
test_all <- read_weighting_area(code_weighting="all", year=2010)
head(test_code)
nrow(test_code)
# check number of weighting areas
expect_equal(nrow(test_code), 1)
# ERRORS
test_that("read_weighting_area", {
# Wrong year and code
expect_error(read_weighting_area(code_weighting=9999999, year=9999999))
# Wrong code
expect_error(read_weighting_area(code_weighting=9999999))
# expect_error(read_weighting_area(code_weighting=9999999, year=2000))
# expect_error(read_weighting_area(code_weighting="XXX", year=2000))
# expect_error(read_weighting_area(code_weighting="XXX"))
# expect_error(read_weighting_area(code_weighting=NULL, year=2000))
expect_error(read_weighting_area(code_weighting=5201108312313213))
test_muni <- read_weighting_area(code_weighting=5201108, year=2010)
# Wrong year
expect_error(read_weighting_area( year=9999999))
# expect_error(read_weighting_area(code_weighting=1401, year= "xx"))
#
# expect_error(read_weighting_area(code_weighting="SC", year=9999999))
# expect_error(read_weighting_area(code_weighting="SC", year="xx"))
#
# expect_error(read_weighting_area(code_weighting="all", year=9999999))
# expect_error(read_weighting_area(code_weighting="all", year="xx"))
# expect_error(read_weighting_area(code_weighting="all", year=9999999))
})
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_meso_region', test_file("tests/testthat/test-read_meso_region.R"))
# update Package coverage
Sys.setenv(NOT_CRAN = "true")
function_coverage(fun='read_meso_region', test_file("tests/testthat/test-read_meso_region.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
test_file("tests/testthat/test-read_weighting_area.R")
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
library(covr)
library(testthat)
library(geobr)
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
# update Package coverage
Sys.setenv(NOT_CRAN = "true")
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
function_coverage(fun='read_weighting_area', test_file("tests/testthat/test-read_weighting_area.R"))
system.time(  geobr_cov <- covr::package_coverage() )
geobr_cov
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
c <- read_census_tract(code_tract=5201108, year=2010)
c
c <- read_census_tract(code_tract=520110805000172, year=2010)
code_tract=520110805000172
year=2010
zone = "urban"
tp="simplified"
showProgress=TRUE
# Get metadata with data addresses
temp_meta <- download_metadata(geography="census_tract", data_type=tp)
# Test year input
temp_meta <- test_year_input(temp_meta, y=year)
# Check zone input urban and rural inputs if year <=2007
if (year<=2007){
if (zone == "urban") {message("Using data of Urban census tracts\n")
temp_meta <- temp_meta[substr(temp_meta[,3],1,1)== "U", ] }
else if (zone == "rural") {message("Using data of Rural census tracts\n")
temp_meta <- temp_meta[substr(temp_meta[,3],1,1)== "R", ] }
else { stop( paste0("Error: Invalid Value to argument 'zone'. It must be either 'urban' or 'rural'")) }
}
if( (!(substr(x = code_tract, 1, 2) %in% temp_meta$code) & !(toupper(substr(x = code_tract, 1, 2)) %in% temp_meta$code_abrev)
)&(!(paste0("U",substr(x = code_tract, 1, 2)) %in% substr(temp_meta$code, 1, 3)) & !(toupper(substr(x = code_tract, 1, 2)) %in% temp_meta$code_abrev)
)&(!(paste0("R",substr(x = code_tract, 1, 2)) %in% substr(temp_meta$code, 1, 3)) & !(toupper(substr(x = code_tract, 1, 2)) %in% temp_meta$code_abrev))
)
if( (!(substr(x = code_tract, 1, 2) %in% temp_meta$code) & !(toupper(substr(x = code_tract, 1, 2)) %in% temp_meta$code_abrev)
)&(!(paste0("U",substr(x = code_tract, 1, 2)) %in% substr(temp_meta$code, 1, 3)) & !(toupper(substr(x = code_tract, 1, 2)) %in% temp_meta$code_abrev)
)&(!(paste0("R",substr(x = code_tract, 1, 2)) %in% substr(temp_meta$code, 1, 3)) & !(toupper(substr(x = code_tract, 1, 2)) %in% temp_meta$code_abrev))
){
stop("Error: Invalid Value to argument code_tract.")
}
if( (!(substr(x = code_tract, 1, 2) %in% temp_meta$code) & !(toupper(substr(x = code_tract, 1, 2)) %in% temp_meta$code_abrev)
)&(!(paste0("U",substr(x = code_tract, 1, 2)) %in% substr(temp_meta$code, 1, 3)) & !(toupper(substr(x = code_tract, 1, 2)) %in% temp_meta$code_abrev)
)&(!(paste0("R",substr(x = code_tract, 1, 2)) %in% substr(temp_meta$code, 1, 3)) & !(toupper(substr(x = code_tract, 1, 2)) %in% temp_meta$code_abrev))
){
stop("Error: Invalid Value to argument code_tract.")
}
# list paths of files to download
if (year<=2007 & zone == "urban") {
if (is.numeric(code_tract)){ file_url <- as.character(subset(temp_meta, code==paste0("U",substr(code_tract, 1, 2)))$download_path) }
if (is.character(code_tract)){ file_url <- as.character(subset(temp_meta, code_abrev==toupper(substr(code_tract, 1, 2)))$download_path) }
} else if (year<=2007 & zone == "rural") {
if (is.numeric(code_tract)){ file_url <- as.character(subset(temp_meta, code==paste0("R",substr(code_tract, 1, 2)))$download_path) }
if (is.character(code_tract)){ file_url <- as.character(subset(temp_meta, code_abrev==toupper(substr(code_tract, 1, 2)))$download_path) }
} else {
if (is.numeric(code_tract)){ file_url <- as.character(subset(temp_meta, code==substr(code_tract, 1, 2))$download_path) }
if (is.character(code_tract)){ file_url <- as.character(subset(temp_meta, code_abrev==toupper(substr(code_tract, 1, 2)))$download_path) }
}
# download files
sf <- download_gpkg(file_url, progress_bar = showProgress)
sf
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_census_tract', test_file("tests/testthat/test-read_census_tract.R"))
function_coverage(fun='read_statistical_grid', test_file("tests/testthat/test-read_statistical_grid.R"))
testthat::expect_output(read_statistical_grid(code_grid=44, year=2010))
geobr_cov
function_coverage(fun='read_statistical_grid', test_file("tests/testthat/test-read_statistical_grid.R"))
function_coverage(fun='read_statistical_grid', test_file("tests/testthat/test-read_statistical_grid.R"))
function_coverage(fun='read_statistical_grid', test_file("tests/testthat/test-read_statistical_grid.R"))
function_coverage(fun='read_statistical_grid', test_file("tests/testthat/test-read_statistical_grid.R"))
function_coverage(fun='read_statistical_grid', test_file("tests/testthat/test-read_statistical_grid.R"))
function_coverage(fun='read_statistical_grid', test_file("tests/testthat/test-read_statistical_grid.R"))
function_coverage(fun='read_statistical_grid', test_file("tests/testthat/test-read_statistical_grid.R"))
read_statistical_grid()
function_coverage(fun='read_statistical_grid', test_file("tests/testthat/test-read_statistical_grid.R"))
function_coverage(fun='read_statistical_grid', test_file("tests/testthat/test-read_statistical_grid.R"))
function_coverage(fun='read_statistical_grid', test_file("tests/testthat/test-read_statistical_grid.R"))
function_coverage(fun='read_statistical_grid', test_file("tests/testthat/test-read_statistical_grid.R"))
expect_error(read_statistical_grid(code_grid='AC', year=9999999))
function_coverage(fun='read_statistical_grid', test_file("tests/testthat/test-read_statistical_grid.R"))
function_coverage(fun='read_statistical_grid', test_file("tests/testthat/test-read_statistical_grid.R"))
expect_error(read_statistical_grid())
expect_error(read_statistical_grid(code_grid=9999999))
expect_error(read_statistical_grid( year=9999999))
testthat::expect_output(read_statistical_grid(code_grid=44, year=2010, showProgress="asd"))
progress_bar=T
progress_bar %in% c(T, F)
!(progress_bar %in% c(T, F))
im <- read_immediate_region()
im <- read_immediate_region(showProgress=F)
im <- read_immediate_region(showProgress='asas')
im <- read_immediate_region(showProgress='asas')
read_immediate_region(showProgress='asdasdasd')
read_immediate_region(showProgress='asdasdasd')
read_immediate_region(showProgress='asdasdasd')
read_immediate_region(showProgress='asdasdasd')
im <- read_immediate_region(code_immediate="AM")
im <- read_immediate_region(showProgress='asdasdasd')
function_coverage(fun='read_statistical_grid', test_file("tests/testthat/test-read_statistical_grid.R"))
library(covr)
library(testthat)
library(geobr)
library(covr)
library(testthat)
library(geobr)
system.time( test_file("tests/testthat/test-read_weighting_area.R") )
# update Package coverage
Sys.setenv(NOT_CRAN = "true")
system.time( test_file("tests/testthat/test-read_weighting_area.R") )
system.time( test_file("tests/testthat/test-read_weighting_area.R") )
system.time( test_file("tests/testthat/test-read_weighting_area.R") )
system.time( test_file("tests/testthat/test-read_weighting_area.R") )
testthat::expect_output( read_weighting_area(code_weighting=5201108, year=2010) )
testthat::expect_output( read_weighting_area(code_weighting="AC", year=2010) )
testthat::expect_output( read_weighting_area(code_weighting=11, year=2010) )
test_code <- read_weighting_area(code_weighting=5201108005004, year=2010)
# check sf object
expect_true(is(test_code, "sf"))
# check number of weighting areas
expect_equal(nrow(test_code), 1)
expect_true
test_code
nrow(test_code)
# check number of weighting areas
expect_equal(nrow(test_code), 68)
test_code
plot(test_code)
system.time( test_file("tests/testthat/test-read_census_tract.R") )
system.time( test_file("tests/testthat/test-read_census_tract.R") )
function_coverage(fun='read_municipality', test_file("tests/testthat/test-read_municipality.R"))
testthat::expect_error(read_municipality( year=NULL))
testthat::expect_error(read_municipality( year=NULL))
function_coverage(fun='read_municipality', test_file("tests/testthat/test-read_municipality.R"))
testthat::expect_error(read_municipality(code_muni=NULL))
read_municipality(code_muni=NULL)
function_coverage(fun='read_municipality', test_file("tests/testthat/test-read_municipality.R"))
test_micro_code <-  read_micro_region(code_micro=11008, year=2010)
nrow(test_micro_code)
test_micro_code$code_micro
expect_equal( nrow(test_micro_code$code_micro), 1)
nrow(test_micro_code)
function_coverage(fun='read_micro_region', test_file("tests/testthat/test-read_micro_region.R"))
function_coverage(fun='read_micro_region', test_file("tests/testthat/test-read_micro_region.R"))
function_coverage(fun='read_micro_region', test_file("tests/testthat/test-read_micro_region.R"))
# update Package coverage
Sys.setenv(NOT_CRAN = "false")
system.time(  geobr_cov <- covr::package_coverage() )
geobr_cov

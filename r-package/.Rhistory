}
# Select data type
temp_meta <- select_data_type(temp_meta, tp)
tp="simplified"
# Select data type
temp_meta <- select_data_type(temp_meta, tp)
# Verify year input
if (is.null(year)){ message("Using data from year 2010\n")
temp_meta <- subset(temp_meta, year==2010)
} else if (year %in% temp_meta$year){ temp_meta <- temp_meta[temp_meta[,2] == year, ]
} else { stop(paste0("Error: Invalid Value to argument 'year'. It must be one of the following: ",
paste(unique(temp_meta$year),collapse = " ")))
}
temp_meta
# list paths of files to download
filesD <- as.character(temp_meta$download_path)
temp_sf <- sf::st_read(temps, quiet=T)
download_gpkg()
temp_sf <- sf::st_read(temps, quiet=T)
#' Download geopackage to tempdir
#'
#'
download_gpkg <- function(){
temps <- paste0(tempdir(),"/", unlist(lapply(strsplit(filesD,"/"),tail,n=1L)))
httr::GET(url=filesD, httr::progress(), httr::write_disk(temps, overwrite = T))
return(temps)
}
temps <- download_gpkg()
# read sf
temp_sf <- sf::st_read(temps, quiet=T)
plot(temp_sf)
temps
read_state2 <- function(code_state="all", year=NULL, tp="simplified"){
# Get metadata with data addresses
metadata <- download_metadata()
# Select geo
temp_meta <- subset(metadata, geo=="state")
# Select data type
temp_meta <- select_data_type(temp_meta, tp)
# Verify year input
if (is.null(year)){ message("Using data from year 2010\n")
year <- 2010
temp_meta <- subset(temp_meta, year==2010)
} else if (year %in% temp_meta$year){ temp_meta <- temp_meta[temp_meta[,2] == year, ]
} else { stop(paste0("Error: Invalid Value to argument 'year'. It must be one of the following: ",
paste(unique(temp_meta$year),collapse = " ")))
}
# BLOCK 2.1 From 1872 to 1991  ----------------------------
x <- year
if( x < 1992){
#   if( !(substr(x = code_state, 1, 2) %in% temp_meta$code) &
#       !(substr(x = code_state, 1, 2) %in% temp_meta$code_abrev) &
#       !(substr(x = code_state, 1, 3) %in% "all")) {
#       stop("Error: Invalid Value to argument code_state.")
#       }
if(is.null(code_state)){ stop("Value to argument 'code_state' cannot be NULL") }
message("Loading data for the whole country\n")
# list paths of files to download
filesD <- as.character(temp_meta$download_path)
# download files
# temps <- paste0(tempdir(),"/", unlist(lapply(strsplit(filesD,"/"),tail,n=1L)))
# httr::GET(url=filesD, httr::progress(), httr::write_disk(temps, overwrite = T))
temps <- download_gpkg()
# read sf
temp_sf <- sf::st_read(temps, quiet=T)
return(temp_sf)
} else {
# BLOCK 2.2 From 2000 onwards  ----------------------------
# Verify code_state input
# if code_state=="all", read the entire country
if(code_state=="all"){ message("Loading data for the whole country\n")
# list paths of files to download
filesD <- as.character(temp_meta$download_path)
# input for progress bar
total <- length(filesD)
pb <- utils::txtProgressBar(min = 0, max = total, style = 3)
# download files
lapply(X=filesD, function(x){
i <- match(c(x),filesD)
httr::GET(url=x, #httr::progress(),
httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T))
utils::setTxtProgressBar(pb, i)
}
)
# closing progress bar
close(pb)
# read files and pile them up
files <- unlist(lapply(strsplit(filesD,"/"), tail, n = 1L))
files <- paste0(tempdir(),"/",files)
files <- lapply(X=files, FUN= sf::st_read, quiet=T)
shape <- do.call('rbind', files)
return(shape)
}
if( !(substr(x = code_state, 1, 2) %in% temp_meta$code) & !(substr(x = code_state, 1, 2) %in% temp_meta$code_abrev)){
stop("Error: Invalid Value to argument code_state.")
} else{
# list paths of files to download
if (is.numeric(code_state)){ filesD <- as.character(subset(temp_meta, code==substr(code_state, 1, 2))$download_path) }
if (is.character(code_state)){ filesD <- as.character(subset(temp_meta, code_abrev==substr(code_state, 1, 2))$download_path) }
# download files
temps <- paste0(tempdir(),"/", unlist(lapply(strsplit(filesD,"/"),tail,n=1L)))
httr::GET(url=filesD, httr::write_disk(temps, overwrite = T))
# read sf
shape <- sf::st_read(temps, quiet=T)
if(nchar(code_state)==2){
return(shape)
# } else if(code_state %in% shape$code_state){
#   x <- code_state
#   shape <- subset(shape, code_state==x)
#   return(shape)
} else{
stop("Error: Invalid Value to argument code_state.")
}
}
}}
read_state2 <- function(code_state="all", year=NULL, tp="simplified"){
# Get metadata with data addresses
metadata <- download_metadata()
# Select geo
temp_meta <- subset(metadata, geo=="state")
# Select data type
temp_meta <- select_data_type(temp_meta, tp)
# Verify year input
if (is.null(year)){ message("Using data from year 2010\n")
year <- 2010
temp_meta <- subset(temp_meta, year==2010)
} else if (year %in% temp_meta$year){ temp_meta <- temp_meta[temp_meta[,2] == year, ]
} else { stop(paste0("Error: Invalid Value to argument 'year'. It must be one of the following: ",
paste(unique(temp_meta$year),collapse = " ")))
}
# BLOCK 2.1 From 1872 to 1991  ----------------------------
x <- year
if( x < 1992){
#   if( !(substr(x = code_state, 1, 2) %in% temp_meta$code) &
#       !(substr(x = code_state, 1, 2) %in% temp_meta$code_abrev) &
#       !(substr(x = code_state, 1, 3) %in% "all")) {
#       stop("Error: Invalid Value to argument code_state.")
#       }
if(is.null(code_state)){ stop("Value to argument 'code_state' cannot be NULL") }
message("Loading data for the whole country\n")
# list paths of files to download
filesD <- as.character(temp_meta$download_path)
# download files
# temps <- paste0(tempdir(),"/", unlist(lapply(strsplit(filesD,"/"),tail,n=1L)))
# httr::GET(url=filesD, httr::progress(), httr::write_disk(temps, overwrite = T))
temps <- download_gpkg()
# read sf
temp_sf <- sf::st_read(temps, quiet=T)
return(temp_sf)
} else {
# BLOCK 2.2 From 2000 onwards  ----------------------------
# Verify code_state input
# if code_state=="all", read the entire country
if(code_state=="all"){ message("Loading data for the whole country\n")
# list paths of files to download
filesD <- as.character(temp_meta$download_path)
# input for progress bar
total <- length(filesD)
pb <- utils::txtProgressBar(min = 0, max = total, style = 3)
# download files
lapply(X=filesD, function(x){
i <- match(c(x),filesD)
httr::GET(url=x, #httr::progress(),
httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T))
utils::setTxtProgressBar(pb, i)
}
)
# closing progress bar
close(pb)
# read files and pile them up
files <- unlist(lapply(strsplit(filesD,"/"), tail, n = 1L))
files <- paste0(tempdir(),"/",files)
files <- lapply(X=files, FUN= sf::st_read, quiet=T)
shape <- do.call('rbind', files)
return(shape)
}
if( !(substr(x = code_state, 1, 2) %in% temp_meta$code) & !(substr(x = code_state, 1, 2) %in% temp_meta$code_abrev)){
stop("Error: Invalid Value to argument code_state.")
} else{
# list paths of files to download
if (is.numeric(code_state)){ filesD <- as.character(subset(temp_meta, code==substr(code_state, 1, 2))$download_path) }
if (is.character(code_state)){ filesD <- as.character(subset(temp_meta, code_abrev==substr(code_state, 1, 2))$download_path) }
# download files
# temps <- paste0(tempdir(),"/", unlist(lapply(strsplit(filesD,"/"),tail,n=1L)))
# httr::GET(url=filesD, httr::write_disk(temps, overwrite = T))
temps <- download_gpkg()
# read sf
shape <- sf::st_read(temps, quiet=T)
if(nchar(code_state)==2){
return(shape)
# } else if(code_state %in% shape$code_state){
#   x <- code_state
#   shape <- subset(shape, code_state==x)
#   return(shape)
} else{
stop("Error: Invalid Value to argument code_state.")
}
}
}}
ufs <- read_state(code_state="AL", year=2010)
plot(ufs)
uf <- read_state(code_state="SC", year=2000)
uf <- read_state(code_state=12, year=2017)
uf <- read_state(code_state=12, year=1991)
plot(uf)
ufs <- read_state(code_state="all", year=1872)
plot(ufs)
library(geobr)
# Load geobr and other libraries we'll use
library(geobr)
library(ggplot2)
library(sf)
library(dplyr)
library(rio)
# download data
state <- read_state(code_state="SE", year=2018)          # State
micro <- read_micro_region(code_micro=160101, year=2000) # Micro region
read_micro_region(code_micro=160101, year=2000)
code_micro=160101
year=2000
# Get metadata
metadata <- download_metadata()
# Select geo
temp_meta <- subset(metadata, geo=="micro_region")
tp="simplified"
# Select data type
temp_meta <- select_data_type(temp_meta, tp)
# Verify year input
if (is.null(year)){ message("Using data from year 2010\n")
temp_meta <- subset(temp_meta, year==2010)
} else if (year %in% temp_meta$year){ temp_meta <- temp_meta[temp_meta[,2] == year, ]
} else { stop(paste0("Error: Invalid Value to argument 'year'. It must be one of the following: ",
paste(unique(temp_meta$year),collapse = " ")))
}
# if code_micro=="all", read the entire country
if(code_micro=="all"){ message("Loading data for the whole country. This might take a few minutes.\n")
# list paths of files to download
filesD <- as.character(temp_meta$download_path)
# input for progress bar
total <- length(filesD)
pb <- utils::txtProgressBar(min = 0, max = total, style = 3)
# download files
lapply(X=filesD, function(x){
i <- match(c(x),filesD)
httr::GET(url=x, #httr::progress(),
httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T))
utils::setTxtProgressBar(pb, i)
}
)
# closing progress bar
close(pb)
# read files and pile them up
files <- unlist(lapply(strsplit(filesD,"/"), tail, n = 1L))
files <- paste0(tempdir(),"/",files)
files <- lapply(X=files, FUN= sf::st_read, quiet=T)
shape <- do.call('rbind', files)
return(shape)
}
shape
# list paths of files to download
if (is.numeric(code_micro)){ filesD <- as.character(subset(temp_meta, code==substr(code_micro, 1, 2))$download_path) }
if (is.character(code_micro)){ filesD <- as.character(subset(temp_meta, code_abrev==substr(code_micro, 1, 2))$download_path) }
# download files
temps <- download_gpkg()
# read sf
shape <- sf::st_read(temps, quiet=T)
shape
#' @examples \donttest{
#'
#' library(geobr)
#'
#' # Read municipal seats in an specific year
#'   m <- read_municipal_seat(year=1991)
#'
#' }
#'
#'
read_municipal_seat <- function(year=NULL){
# Get metadata with data addresses
metadata <- download_metadata()
# Select geo
temp_meta <- subset(metadata, geo=="municipal_seat")
# Verify year input
if (is.null(year)){ message("Using latest data from year 2010\n")
year <- 2010
temp_meta <- subset(temp_meta, year==2010)
} else if (year %in% temp_meta$year){ temp_meta <- temp_meta[temp_meta[,2] == year, ]
} else { stop(paste0("Error: Invalid Value to argument 'year'. It must be one of the following: ",
paste(unique(temp_meta$year),collapse = " ")))
}
# list paths of files to download
filesD <- as.character(temp_meta$download_path)
# download files
temps <- download_gpkg(filesD)
# read sf
temp_sf <- sf::st_read(temps, quiet=T)
return(temp_sf)
}
library(geobr)
library(geobr)
read_municipal_seat(year=NULL)
library(geobr)
read_municipal_seat()
read_municipal_seat()
library(geobr)
test_sf <- read_municipal_seat(year=1991)
library(geobr)
library(geobr)
b <- read_conservation_units(date=201909)
m <- read_municipal_seat(year=1991)
test_that("read_municipal_seat", {
# # skip tests because they take too much time
# skip_on_cran()
# skip_on_travis()
# read data and check sf object
expect_true(is(read_municipal_seat(year=NULL), "sf"))
test_sf <- read_municipal_seat(year=1991)
expect_true(is(test_sf, "sf"))
# check projection
expect_equal(sf::st_crs(test_sf)[[2]], "+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs")
})
library(testthat)
test_that("read_municipal_seat", {
# # skip tests because they take too much time
# skip_on_cran()
# skip_on_travis()
# read data and check sf object
expect_true(is(read_municipal_seat(year=NULL), "sf"))
test_sf <- read_municipal_seat(year=1991)
expect_true(is(test_sf, "sf"))
# check projection
expect_equal(sf::st_crs(test_sf)[[2]], "+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs")
})
# ERRORS and messagens  -----------------------
test_that("read_municipal_seat", {
# # skip tests because they take too much time
# skip_on_cran()
# skip_on_travis()
# Wrong year
expect_error(read_municipal_seat(year=9999999))
expect_error(read_municipal_seat(year="xxx"))
})
utils::remove.packages('geobr')
library(geobr)
devtools::install_github("ipeaGIT/geobr", subdir = "r-package")
library(geobr)
a <- read_municipal_seat()
head(a)
summary(a$code_muni)
summary(a$code_state)
summary(a$code_region)
b <- table(a$code_muni)
b <- sort(b)
tail(b)
cc <- subset(a, code_muni == 5200159 )
mapview::mapview(cc)
head(cc)
subset(a, name_muni == 'Anicuns' )
subset(a, name_muni == 'Adelândia' )
# download dos dados
m <- read_municipal_seat()
# Quantas vezes cada municipios se repete
freq <- table(m$code_muni)
freq
library(magrittr)
# Quantas vezes cada municipios se repete
freq <- table(m$code_muni) %>% as.data.frame( )
freq
head(freq)
# identifica repetidos
repetidos <- subset(freq, Freq >1 )
repetidos
# download dos dados
m <- read_municipal_seat(year=99999)
# download dos dados
m <- read_municipal_seat(year=1991)
# Quantas vezes cada municipios se repete
freq <- table(m$code_muni) %>% as.data.frame( )
# identifica repetidos
repetidos <- subset(freq, Freq >1 )
repetidos
# download dos dados
m <- read_municipal_seat(year=1872)
# Quantas vezes cada municipios se repete
freq <- table(m$code_muni) %>% as.data.frame( )
# identifica repetidos
repetidos <- subset(freq, Freq >1 )
repetidos
# download dos dados
m <- read_municipal_seat(year=1980)
# Quantas vezes cada municipios se repete
freq <- table(m$code_muni) %>% as.data.frame( )
# identifica repetidos
repetidos <- subset(freq, Freq >1 )
repetidos
Sys.getenv("TEST_ONE") == ""
devtools::check(pkg = ".",  cran = TRUE)
library(geobr)
a <- read_amazon()
plot(a)
a <- read_amazon(tp='original')
a <- read_amazon()
b <- read_amazon(tp='original')
head(a)
View(a)
View(b)
plot(a)
plot(b)
mapview::mapview(a) +b
meso <- read_meso_region(code_meso="all", year=2010)
plot(meso)
head(meso)
# Get metadata with data addresses
metadata <- download_metadata()
View(metadata)
temp_meta <- subset(metadata, geo=="meso_region")
View(temp_meta)
year=NULL
if (is.null(year)){ message("Using data from year 2010\n")
temp_meta <- subset(temp_meta, year==2010)
} else if (year %in% temp_meta$year){ temp_meta <- temp_meta[temp_meta[,2] == year, ]
} else { stop(paste0("Error: Invalid Value to argument 'year'. It must be one of the following: ",
paste(unique(temp_meta$year),collapse = " ")))
}
View(temp_meta)
tp="simplified"
temp_meta <- select_data_type(temp_meta, tp)
code_meso=33
meso <- read_meso_region(code_meso=12, year=2017)
plot(meso)
meso <- read_meso_region()
code_meso
tp
year
temp_meta$download_path
# read files and pile them up
files <- unlist(lapply(strsplit(filesD,"/"), tail, n = 1L))
# list paths of files to download
filesD <- as.character(temp_meta$download_path)
filesD
# if code_meso=="all", read the entire country
if(code_meso=="all"){ message("Loading data for the whole country\n")
# list paths of files to download
filesD <- as.character(temp_meta$download_path)
# input for progress bar
total <- length(filesD)
pb <- utils::txtProgressBar(min = 0, max = total, style = 3)
# download files
lapply(X=filesD, function(x){
i <- match(c(x),filesD)
httr::GET(url=x, #httr::progress(),
httr::write_disk(paste0(tempdir(),"/", unlist(lapply(strsplit(x,"/"),tail,n=1L))), overwrite = T))
utils::setTxtProgressBar(pb, i)
}
)
# closing progress bar
close(pb)
# read files and pile them up
files <- unlist(lapply(strsplit(filesD,"/"), tail, n = 1L))
files <- paste0(tempdir(),"/",files)
files <- lapply(X=files, FUN= sf::st_read, quiet=T)
shape <- do.call('rbind', files)
return(shape)
}
meso <- read_meso_region(code_meso = 5555555555555555)
meso <- read_meso_region(code_meso = "AC")
temp_meta
if (is.numeric(code_meso)){ filesD <- as.character(subset(temp_meta, code==substr(code_meso, 1, 2))$download_path) }
if (is.character(code_meso)){ filesD <- as.character(subset(temp_meta, code_abrev==substr(code_meso, 1, 2))$download_path) }
filesD
# download files
temps <- download_gpkg(filesD)
# read sf
shape <- sf::st_read(temps, quiet=T)
shape
im <- read_intermediate_region()
geobr_list()
library(geobr)
geobr_list()
a <- geobr::list_geobr()
a = geobr::list_geobr()
View(a)
rj <- read_state(code_state = 33)
sp <- read_state(code_state = 'SP')
plot(rj)
plot(sp)
a <- rbind(rj, sp)
plot(a)
m <- read_metro_area()
m <- read_metro_area(year==1111111)
m <- read_metro_area(year=1111111)
m <- read_metro_area(year=2013)
plot(m)
mapview::mapview(m)
m <- read_metro_area(year=2013, tp='original')
mapview::mapview(m)
geobr::list_geobr()
df <- data.frame(src = round(c(0x10000:0x10100,runif(100,
0x1000,0x100000))),
dst =
round(c(0x11000:0x11100,runif(100,0x1000,0x100000))))
hexlabels <- function(x)
sprintf("0x%s", as.character.hexmode(x))
ggplot(df, aes(x = src, y = dst)) +
geom_point() +
scale_x_continuous(labels = hexlabels) +
scale_y_continuous(labels = hexlabels)
library(ggplot2)
ggplot(df, aes(x = src, y = dst)) +
geom_point() +
scale_x_continuous(labels = hexlabels) +
scale_y_continuous(labels = hexlabels)
